

<<<<<<< HEAD
Microchip Technology PIC LITE Macro Assembler V1.30 build 55553 
                                                                                               Thu Aug 06 17:10:21 2015
=======
Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Aug 06 16:50:02 2015
>>>>>>> origin/master

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
<<<<<<< HEAD
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0008                     	;# 
    33  0009                     	;# 
    34  000A                     	;# 
    35  000B                     	;# 
    36  000C                     	;# 
    37  000D                     	;# 
    38  000E                     	;# 
    39  000E                     	;# 
    40  000F                     	;# 
    41  0010                     	;# 
    42  0011                     	;# 
    43  0012                     	;# 
    44  0013                     	;# 
    45  0014                     	;# 
    46  0015                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0017                     	;# 
    50  0018                     	;# 
    51  0019                     	;# 
    52  001A                     	;# 
    53  001B                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  001D                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0087                     	;# 
    63  0088                     	;# 
    64  0089                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  009F                     	;# 
    78  010C                     	;# 
    79  010D                     	;# 
    80  010E                     	;# 
    81  010F                     	;# 
    82  018C                     	;# 
    83  018D                     	;# 
    84  0040                     _RD0	set	64
    85  0041                     _RD1	set	65
    86  0044                     _RD4	set	68
    87  0045                     _RD5	set	69
    88  0046                     _RD6	set	70
    89  0047                     _RD7	set	71
    90  0085                     _TRISAbits	set	133
    91  0088                     _TRISD	set	136
    92                           
    93                           	psect	text0
    94  0000                     __ptext0:	
    95                           ; #config settings
    96                           
    97                           
    98                           ;psect for function _Lcd_Port
    99  0000                     
   100                           	psect	cinit
   101  07F8                     start_initialization:	
   102  07F8                     __initialization:	
   103                           
   104                           ; Clear objects allocated to BANK0
   105  07F8  01BD               	clrf	__pbssBANK0& (0+127)
   106  07F9  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   107  07FA  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   108  07FB  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   109  07FC                     end_of_initialization:	
   110                           ;End of C runtime variable initialization code
   111                           
   112  07FC                     __end_of__initialization:	
   113  07FC  0183               	clrf	3
   114  07FD  120A  118A  2E2B   	ljmp	_main	;jump to C main() function
   115                           
   116                           	psect	bssBANK0
   117  003D                     __pbssBANK0:	
   118  003D                     _TiempoPulso:	
   119  003D                     	ds	2
   120  003F                     _estado:	
   121  003F                     	ds	2
   122                           
   123                           	psect	cstackCOMMON
   124  0070                     __pcstackCOMMON:	
   125  0070                     ?_pic_init:	
   126  0070                     ??_pic_init:	
   127                           ; 0 bytes @ 0x0
   128                           
   129  0070                     ?_Lcd_Port:	
   130                           ; 0 bytes @ 0x0
   131                           
   132  0070                     ??_Lcd_Port:	
   133                           ; 0 bytes @ 0x0
   134                           
   135  0070                     ?_Lcd_Cmd:	
   136                           ; 0 bytes @ 0x0
   137                           
   138  0070                     ?_Lcd_Init:	
   139                           ; 0 bytes @ 0x0
   140                           
   141  0070                     ?_Lcd_Write_Char:	
   142                           ; 0 bytes @ 0x0
   143                           
   144  0070                     ?_main:	
   145                           ; 0 bytes @ 0x0
   146                           
   147  0070                     ?___awdiv:	
   148                           ; 2 bytes @ 0x0
   149                           
   150  0070                     ?___wmul:	
   151                           ; 2 bytes @ 0x0
   152                           
   153  0070                     ?___ftpack:	
   154                           ; 2 bytes @ 0x0
   155                           
   156  0070                     ?___ftneg:	
   157                           ; 3 bytes @ 0x0
   158                           
   159  0070                     ?___fttol:	
   160                           ; 3 bytes @ 0x0
   161                           
   162  0070                     Lcd_Port@a:	
   163                           ; 4 bytes @ 0x0
   164                           
   165  0070                     ___awdiv@divisor:	
   166                           ; 1 bytes @ 0x0
   167                           
   168  0070                     ___wmul@multiplier:	
   169                           ; 2 bytes @ 0x0
   170                           
   171  0070                     ___ftpack@arg:	
   172                           ; 2 bytes @ 0x0
   173                           
   174  0070                     ___ftneg@f1:	
   175                           ; 3 bytes @ 0x0
   176                           
   177  0070                     ___fttol@f1:	
   178                           ; 3 bytes @ 0x0
   179                           
   180                           
   181                           ; 3 bytes @ 0x0
   182  0070                     	ds	1
   183  0071                     ??_Lcd_Cmd:	
   184  0071                     ??_Lcd_Write_Char:	
   185                           ; 0 bytes @ 0x1
   186                           
   187                           
   188                           ; 0 bytes @ 0x1
   189  0071                     	ds	1
   190  0072                     Lcd_Write_Char@temp:	
   191  0072                     ___awdiv@dividend:	
   192                           ; 1 bytes @ 0x2
   193                           
   194  0072                     ___wmul@multiplicand:	
   195                           ; 2 bytes @ 0x2
   196                           
   197                           
   198                           ; 2 bytes @ 0x2
   199  0072                     	ds	1
   200  0073                     ??___ftneg:	
   201  0073                     Lcd_Cmd@a:	
   202                           ; 0 bytes @ 0x3
   203                           
   204  0073                     Lcd_Write_Char@y:	
   205                           ; 1 bytes @ 0x3
   206                           
   207  0073                     ___ftpack@exp:	
   208                           ; 1 bytes @ 0x3
   209                           
   210                           
   211                           ; 1 bytes @ 0x3
   212  0073                     	ds	1
   213  0074                     ??_Lcd_Init:	
   214  0074                     ??___awdiv:	
   215                           ; 0 bytes @ 0x4
   216                           
   217  0074                     ??___fttol:	
   218                           ; 0 bytes @ 0x4
   219                           
   220  0074                     ??___wmul:	
   221                           ; 0 bytes @ 0x4
   222                           
   223  0074                     Lcd_Write_Char@a:	
   224                           ; 0 bytes @ 0x4
   225                           
   226  0074                     ___ftpack@sign:	
   227                           ; 1 bytes @ 0x4
   228                           
   229  0074                     ___wmul@product:	
   230                           ; 1 bytes @ 0x4
   231                           
   232                           
   233                           ; 2 bytes @ 0x4
   234  0074                     	ds	1
   235  0075                     ??___ftpack:	
   236  0075                     ___awdiv@counter:	
   237                           ; 0 bytes @ 0x5
   238                           
   239                           
   240                           ; 1 bytes @ 0x5
   241  0075                     	ds	1
   242  0076                     ___awdiv@sign:	
   243                           
   244                           ; 1 bytes @ 0x6
   245  0076                     	ds	1
   246  0077                     ___awdiv@quotient:	
   247                           
   248                           ; 2 bytes @ 0x7
   249  0077                     	ds	1
   250  0078                     ?___ftadd:	
   251  0078                     ___fttol@sign1:	
   252                           ; 3 bytes @ 0x8
   253                           
   254  0078                     ___ftadd@f1:	
   255                           ; 1 bytes @ 0x8
   256                           
   257                           
   258                           ; 3 bytes @ 0x8
   259  0078                     	ds	1
   260  0079                     ___fttol@lval:	
   261                           
   262                           ; 4 bytes @ 0x9
   263  0079                     	ds	2
   264  007B                     ___ftadd@f2:	
   265                           
   266                           ; 3 bytes @ 0xB
   267  007B                     	ds	2
   268  007D                     ___fttol@exp1:	
   269                           
   270                           ; 1 bytes @ 0xD
   271  007D                     	ds	1
   272  007E                     ??_modf:	
   273                           
   274                           	psect	cstackBANK0
   275  0020                     __pcstackBANK0:	
   276                           ; 0 bytes @ 0xE
   277                           
   278  0020                     ??___ftadd:	
   279  0020                     ?___attoft:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0020                     ___attoft@c:	
   283                           ; 3 bytes @ 0x0
   284                           
   285                           
   286                           ; 3 bytes @ 0x0
   287  0020                     	ds	3
   288  0023                     ??___attoft:	
   289                           
   290                           ; 0 bytes @ 0x3
   291  0023                     	ds	1
   292  0024                     ___ftadd@sign:	
   293                           
   294                           ; 1 bytes @ 0x4
   295  0024                     	ds	1
   296  0025                     ___attoft@sign:	
   297  0025                     ___ftadd@exp2:	
   298                           ; 1 bytes @ 0x5
   299                           
   300                           
   301                           ; 1 bytes @ 0x5
   302  0025                     	ds	1
   303  0026                     ___ftadd@exp1:	
   304                           
   305                           ; 1 bytes @ 0x6
   306  0026                     	ds	1
   307  0027                     ?_modf:	
   308  0027                     modf@value:	
   309                           ; 3 bytes @ 0x7
   310                           
   311                           
   312                           ; 3 bytes @ 0x7
   313  0027                     	ds	3
   314  002A                     modf@iptr:	
   315                           
   316                           ; 1 bytes @ 0xA
   317  002A                     	ds	1
   318  002B                     ??_main:	
   319                           
   320                           ; 0 bytes @ 0xB
   321  002B                     	ds	2
   322  002D                     main@entero_decena:	
   323                           
   324                           ; 2 bytes @ 0xD
   325  002D                     	ds	2
   326  002F                     main@decimal:	
   327                           
   328                           ; 2 bytes @ 0xF
   329  002F                     	ds	2
   330  0031                     main@recibido:	
   331                           
   332                           ; 3 bytes @ 0x11
   333  0031                     	ds	3
   334  0034                     _main$517:	
   335                           
   336                           ; 3 bytes @ 0x14
   337  0034                     	ds	3
   338  0037                     main@base:	
   339                           
   340                           ; 2 bytes @ 0x17
   341  0037                     	ds	2
   342  0039                     main@entero:	
   343                           
   344                           ; 2 bytes @ 0x19
   345  0039                     	ds	2
   346  003B                     main@x:	
   347                           
   348                           ; 2 bytes @ 0x1B
   349  003B                     	ds	2
   350                           
   351                           	psect	maintext
   352  062B                     __pmaintext:	
   353 ;;
   354 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   355 ;;
   356 ;; *************** function _main *****************
   357 ;; Defined at:
   358 ;;		line 24 in file "main.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;		None
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  x               2   27[BANK0 ] int 
   363 ;;  recibido        3   17[BANK0 ] float 
   364 ;;  entero          2   25[BANK0 ] int 
   365 ;;  base            2   23[BANK0 ] int 
   366 ;;  decimal         2   15[BANK0 ] int 
   367 ;;  entero_decen    2   13[BANK0 ] int 
   368 ;;  decimal2        2    0        int 
   369 ;;  decimal1        2    0        int 
   370 ;;  entero_unida    2    0        int 
   371 ;;  a               2    0        unsigned int 
   372 ;; Return value:  Size  Location     Type
   373 ;;                  2   70[COMMON] int 
   374 ;; Registers used:
   375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   376 ;; Tracked objects:
   377 ;;		On entry : 17F/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   381 ;;      Params:         0       0       0       0       0
   382 ;;      Locals:         0      16       0       0       0
   383 ;;      Temps:          0       2       0       0       0
   384 ;;      Totals:         0      18       0       0       0
   385 ;;Total ram usage:       18 bytes
   386 ;; Hardware stack levels required when called:    3
   387 ;; This function calls:
   388 ;;		_Lcd_Init
   389 ;;		_Lcd_Write_Char
   390 ;;		___awdiv
   391 ;;		___fttol
   392 ;;		___wmul
   393 ;;		_modf
   394 ;;		_pic_init
   395 ;; This function is called by:
   396 ;;		Startup code after reset
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           
   401                           ;psect for function _main
   402  062B                     _main:	
   403                           
   404                           ;main.c: 26: unsigned int a;
   405                           ;main.c: 27: pic_init();
   406                           
   407                           ;incstack = 0
   408                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   409  062B  120A  118A  236B   	fcall	_pic_init
      +       120A  118A         
   410                           
   411                           ;main.c: 28: Lcd_Init();
   412  0630  120A  118A  2481   	fcall	_Lcd_Init
      +       120A  118A         
   413                           
   414                           ;main.c: 30: float recibido = 56.12;
   415  0635  307B               	movlw	123
   416  0636  1283               	bcf	3,5	;RP0=0, select bank0
   417  0637  1303               	bcf	3,6	;RP1=0, select bank0
   418  0638  00B1               	movwf	main@recibido
   419  0639  3060               	movlw	96
   420  063A  00B2               	movwf	main@recibido+1
   421  063B  3042               	movlw	66
   422  063C  00B3               	movwf	main@recibido+2
   423                           
   424                           ;main.c: 31: int entero_decena, entero_unidad, decimal1, decimal2;
   425                           ;main.c: 32: int entero, decimal;
   426                           ;main.c: 33: int base;
   427                           ;main.c: 36: decimal = modf (recibido , &entero);
   428  063D  3039               	movlw	main@entero& (0+255)
   429  063E  00AB               	movwf	??_main
   430  063F  082B               	movf	??_main,w
   431  0640  00AA               	movwf	modf@iptr
   432  0641  0831               	movf	main@recibido,w
   433  0642  00A7               	movwf	modf@value
   434  0643  0832               	movf	main@recibido+1,w
   435  0644  00A8               	movwf	modf@value+1
   436  0645  0833               	movf	main@recibido+2,w
   437  0646  00A9               	movwf	modf@value+2
   438  0647  120A  118A  2433   	fcall	_modf
      +       120A  118A         
   439  064C  1283               	bcf	3,5	;RP0=0, select bank0
   440  064D  1303               	bcf	3,6	;RP1=0, select bank0
   441  064E  0827               	movf	?_modf,w
   442  064F  00B4               	movwf	_main$517
   443  0650  0828               	movf	?_modf+1,w
   444  0651  00B5               	movwf	_main$517+1
   445  0652  0829               	movf	?_modf+2,w
   446  0653  00B6               	movwf	_main$517+2
   447                           
   448                           ;main.c: 31: int entero_decena, entero_unidad, decimal1, decimal2;
   449                           ;main.c: 32: int entero, decimal;
   450                           ;main.c: 33: int base;
   451                           ;main.c: 36: decimal = modf (recibido , &entero);
   452  0654  0834               	movf	_main$517,w
   453  0655  00F0               	movwf	___fttol@f1
   454  0656  0835               	movf	_main$517+1,w
   455  0657  00F1               	movwf	___fttol@f1+1
   456  0658  0836               	movf	_main$517+2,w
   457  0659  00F2               	movwf	___fttol@f1+2
   458  065A  120A  118A  259F   	fcall	___fttol
      +       120A  118A         
   459  065F  0871               	movf	?___fttol+1,w
   460  0660  1283               	bcf	3,5	;RP0=0, select bank0
   461  0661  1303               	bcf	3,6	;RP1=0, select bank0
   462  0662  01B0               	clrf	main@decimal+1
   463  0663  07B0               	addwf	main@decimal+1,f
   464  0664  0870               	movf	?___fttol,w
   465  0665  01AF               	clrf	main@decimal
   466  0666  07AF               	addwf	main@decimal,f
   467                           
   468                           ;main.c: 37: for (int x=1; x<10; x++)
   469  0667  3001               	movlw	1
   470  0668  00BB               	movwf	main@x
   471  0669  3000               	movlw	0
   472  066A  00BC               	movwf	main@x+1
   473  066B  083C               	movf	main@x+1,w
   474  066C  3A80               	xorlw	128
   475  066D  00FF               	movwf	127
   476  066E  3080               	movlw	128
   477  066F  027F               	subwf	127,w
   478  0670  1D03               	skipz
   479  0671  2E74               	goto	u1465
   480  0672  300A               	movlw	10
   481  0673  023B               	subwf	main@x,w
   482  0674                     u1465:	
   483  0674  1803               	btfsc	3,0
   484  0675  2EE8               	goto	l1374
   485  0676                     l1362:	
   486                           
   487                           ;main.c: 38: {
   488                           ;main.c: 39: base = x*10;
   489  0676  1283               	bcf	3,5	;RP0=0, select bank0
   490  0677  1303               	bcf	3,6	;RP1=0, select bank0
   491  0678  083C               	movf	main@x+1,w
   492  0679  01F1               	clrf	___wmul@multiplier+1
   493  067A  07F1               	addwf	___wmul@multiplier+1,f
   494  067B  083B               	movf	main@x,w
   495  067C  01F0               	clrf	___wmul@multiplier
   496  067D  07F0               	addwf	___wmul@multiplier,f
   497  067E  300A               	movlw	10
   498  067F  00F2               	movwf	___wmul@multiplicand
   499  0680  3000               	movlw	0
   500  0681  00F3               	movwf	___wmul@multiplicand+1
   501  0682  120A  118A  23AE   	fcall	___wmul
      +       120A  118A         
   502  0687  0871               	movf	?___wmul+1,w
   503  0688  1283               	bcf	3,5	;RP0=0, select bank0
   504  0689  1303               	bcf	3,6	;RP1=0, select bank0
   505  068A  01B8               	clrf	main@base+1
   506  068B  07B8               	addwf	main@base+1,f
   507  068C  0870               	movf	?___wmul,w
   508  068D  01B7               	clrf	main@base
   509  068E  07B7               	addwf	main@base,f
   510                           
   511                           ;main.c: 40: if ((entero/base) > 1)
   512  068F  0838               	movf	main@base+1,w
   513  0690  01F1               	clrf	___awdiv@divisor+1
   514  0691  07F1               	addwf	___awdiv@divisor+1,f
   515  0692  0837               	movf	main@base,w
   516  0693  01F0               	clrf	___awdiv@divisor
   517  0694  07F0               	addwf	___awdiv@divisor,f
   518  0695  083A               	movf	main@entero+1,w
   519  0696  01F3               	clrf	___awdiv@dividend+1
   520  0697  07F3               	addwf	___awdiv@dividend+1,f
   521  0698  0839               	movf	main@entero,w
   522  0699  01F2               	clrf	___awdiv@dividend
   523  069A  07F2               	addwf	___awdiv@dividend,f
   524  069B  120A  118A  24DC   	fcall	___awdiv
      +       120A  118A         
   525  06A0  0871               	movf	?___awdiv+1,w
   526  06A1  3A80               	xorlw	128
   527  06A2  00FF               	movwf	127
   528  06A3  3080               	movlw	128
   529  06A4  027F               	subwf	127,w
   530  06A5  1D03               	skipz
   531  06A6  2EA9               	goto	u1475
   532  06A7  3002               	movlw	2
   533  06A8  0270               	subwf	?___awdiv,w
   534  06A9                     u1475:	
   535  06A9  1C03               	skipc
   536  06AA  2ED5               	goto	l1370
   537                           
   538                           ;main.c: 41: {
   539                           ;main.c: 42: entero_decena = x;
   540  06AB  1283               	bcf	3,5	;RP0=0, select bank0
   541  06AC  1303               	bcf	3,6	;RP1=0, select bank0
   542  06AD  083C               	movf	main@x+1,w
   543  06AE  01AE               	clrf	main@entero_decena+1
   544  06AF  07AE               	addwf	main@entero_decena+1,f
   545  06B0  083B               	movf	main@x,w
   546  06B1  01AD               	clrf	main@entero_decena
   547  06B2  07AD               	addwf	main@entero_decena,f
   548                           
   549                           ;main.c: 43: entero = entero-(x*base);
   550  06B3  083C               	movf	main@x+1,w
   551  06B4  01F1               	clrf	___wmul@multiplier+1
   552  06B5  07F1               	addwf	___wmul@multiplier+1,f
   553  06B6  083B               	movf	main@x,w
   554  06B7  01F0               	clrf	___wmul@multiplier
   555  06B8  07F0               	addwf	___wmul@multiplier,f
   556  06B9  0838               	movf	main@base+1,w
   557  06BA  01F3               	clrf	___wmul@multiplicand+1
   558  06BB  07F3               	addwf	___wmul@multiplicand+1,f
   559  06BC  0837               	movf	main@base,w
   560  06BD  01F2               	clrf	___wmul@multiplicand
   561  06BE  07F2               	addwf	___wmul@multiplicand,f
   562  06BF  120A  118A  23AE   	fcall	___wmul
      +       120A  118A         
   563  06C4  0970               	comf	?___wmul,w
   564  06C5  1283               	bcf	3,5	;RP0=0, select bank0
   565  06C6  1303               	bcf	3,6	;RP1=0, select bank0
   566  06C7  00AB               	movwf	??_main
   567  06C8  0971               	comf	?___wmul+1,w
   568  06C9  00AC               	movwf	??_main+1
   569  06CA  0AAB               	incf	??_main,f
   570  06CB  1903               	skipnz
   571  06CC  0AAC               	incf	??_main+1,f
   572  06CD  0839               	movf	main@entero,w
   573  06CE  072B               	addwf	??_main,w
   574  06CF  00B9               	movwf	main@entero
   575  06D0  083A               	movf	main@entero+1,w
   576  06D1  1803               	skipnc
   577  06D2  0A3A               	incf	main@entero+1,w
   578  06D3  072C               	addwf	??_main+1,w
   579  06D4  00BA               	movwf	main@entero+1
   580  06D5                     l1370:	
   581  06D5  3001               	movlw	1
   582  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   583  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   584  06D8  07BB               	addwf	main@x,f
   585  06D9  1803               	skipnc
   586  06DA  0ABC               	incf	main@x+1,f
   587  06DB  3000               	movlw	0
   588  06DC  07BC               	addwf	main@x+1,f
   589  06DD  083C               	movf	main@x+1,w
   590  06DE  3A80               	xorlw	128
   591  06DF  00FF               	movwf	127
   592  06E0  3080               	movlw	128
   593  06E1  027F               	subwf	127,w
   594  06E2  1D03               	skipz
   595  06E3  2EE6               	goto	u1485
   596  06E4  300A               	movlw	10
   597  06E5  023B               	subwf	main@x,w
   598  06E6                     u1485:	
   599  06E6  1C03               	skipc
   600  06E7  2E76               	goto	l1362
   601  06E8                     l1374:	
   602                           
   603                           ;main.c: 44: }
   604                           ;main.c: 46: }
   605                           ;main.c: 48: Lcd_Write_Char(entero);
   606  06E8  1283               	bcf	3,5	;RP0=0, select bank0
   607  06E9  1303               	bcf	3,6	;RP1=0, select bank0
   608  06EA  0839               	movf	main@entero,w
   609  06EB  120A  118A  23FA   	fcall	_Lcd_Write_Char
   610                           
   611                           ;main.c: 95: return 0;
   612                           ;	Return value of _main is never used
   613  06EE  120A  118A  2800   	ljmp	start
   614  06F1                     __end_of_main:	
   615                           
   616                           	psect	text1
   617  036B                     __ptext1:	
   618 ;; *************** function _pic_init *****************
   619 ;; Defined at:
   620 ;;		line 10 in file "lcd.h"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;		None               void
   627 ;; Registers used:
   628 ;;		status,2
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         0       0       0       0       0
   635 ;;      Locals:         0       0       0       0       0
   636 ;;      Temps:          0       0       0       0       0
   637 ;;      Totals:         0       0       0       0       0
   638 ;;Total ram usage:        0 bytes
   639 ;; Hardware stack levels used:    1
   640 ;; This function calls:
   641 ;;		Nothing
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647                           
   648                           ;psect for function _pic_init
   649  036B                     _pic_init:	
   650                           
   651                           ;lcd.h: 12: TRISD = 0x00;
   652                           
   653                           ;incstack = 0
   654                           ; Regs used in _pic_init: [status,2]
   655  036B  1683               	bsf	3,5	;RP0=1, select bank1
   656  036C  1303               	bcf	3,6	;RP1=0, select bank1
   657  036D  0188               	clrf	8	;volatile
   658                           
   659                           ;lcd.h: 14: TRISAbits.TRISA0 = 1;
   660  036E  1405               	bsf	5,0	;volatile
   661                           
   662                           ;lcd.h: 16: TRISAbits.TRISA1 = 1;
   663  036F  1485               	bsf	5,1	;volatile
   664                           
   665                           ;lcd.h: 18: TRISAbits.TRISA2 = 1;
   666  0370  1505               	bsf	5,2	;volatile
   667  0371  0008               	return
   668  0372                     __end_of_pic_init:	
   669                           
   670                           	psect	text2
   671  0433                     __ptext2:	
   672 ;; *************** function _modf *****************
   673 ;; Defined at:
   674 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\modf.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;  value           3    7[BANK0 ] int 
   677 ;;  iptr            1   10[BANK0 ] PTR 
   678 ;;		 -> main@entero(2), 
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  3    7[BANK0 ] PTR 
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   690 ;;      Params:         0       4       0       0       0
   691 ;;      Locals:         0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0
   693 ;;      Totals:         0       4       0       0       0
   694 ;;Total ram usage:        4 bytes
   695 ;; Hardware stack levels used:    1
   696 ;; Hardware stack levels required when called:    2
   697 ;; This function calls:
   698 ;;		___attoft
   699 ;;		___ftadd
   700 ;;		___ftneg
   701 ;;		___fttol
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           
   708                           ;psect for function _modf
   709  0433                     _modf:	
   710                           
   711                           ;incstack = 0
   712                           ; Regs used in _modf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   713  0433  1283               	bcf	3,5	;RP0=0, select bank0
   714  0434  1303               	bcf	3,6	;RP1=0, select bank0
   715  0435  0827               	movf	modf@value,w
   716  0436  00F0               	movwf	___fttol@f1
   717  0437  0828               	movf	modf@value+1,w
   718  0438  00F1               	movwf	___fttol@f1+1
   719  0439  0829               	movf	modf@value+2,w
   720  043A  00F2               	movwf	___fttol@f1+2
   721  043B  120A  118A  259F   	fcall	___fttol
      +       120A  118A         
   722  0440  0872               	movf	?___fttol+2,w
   723  0441  1283               	bcf	3,5	;RP0=0, select bank0
   724  0442  1303               	bcf	3,6	;RP1=0, select bank0
   725  0443  00A2               	movwf	___attoft@c+2
   726  0444  0871               	movf	?___fttol+1,w
   727  0445  00A1               	movwf	___attoft@c+1
   728  0446  0870               	movf	?___fttol,w
   729  0447  00A0               	movwf	___attoft@c
   730  0448  120A  118A  23D1   	fcall	___attoft
      +       120A  118A         
   731  044D  1283               	bcf	3,5	;RP0=0, select bank0
   732  044E  1303               	bcf	3,6	;RP1=0, select bank0
   733  044F  082A               	movf	modf@iptr,w
   734  0450  0084               	movwf	4
   735  0451  0820               	movf	?___attoft,w
   736  0452  1383               	bcf	3,7	;select IRP bank0
   737  0453  0080               	movwf	0
   738  0454  0A84               	incf	4,f
   739  0455  0821               	movf	?___attoft+1,w
   740  0456  0080               	movwf	0
   741  0457  0A84               	incf	4,f
   742  0458  0822               	movf	?___attoft+2,w
   743  0459  0080               	movwf	0
   744  045A  0827               	movf	modf@value,w
   745  045B  00F8               	movwf	___ftadd@f1
   746  045C  0828               	movf	modf@value+1,w
   747  045D  00F9               	movwf	___ftadd@f1+1
   748  045E  0829               	movf	modf@value+2,w
   749  045F  00FA               	movwf	___ftadd@f1+2
   750  0460  082A               	movf	modf@iptr,w
   751  0461  0084               	movwf	4
   752  0462  0800               	movf	0,w
   753  0463  00F0               	movwf	___ftneg@f1
   754  0464  0A84               	incf	4,f
   755  0465  0800               	movf	0,w
   756  0466  00F1               	movwf	___ftneg@f1+1
   757  0467  0A84               	incf	4,f
   758  0468  0800               	movf	0,w
   759  0469  00F2               	movwf	___ftneg@f1+2
   760  046A  120A  118A  2372   	fcall	___ftneg
      +       120A  118A         
   761  046F  0870               	movf	?___ftneg,w
   762  0470  00FB               	movwf	___ftadd@f2
   763  0471  0871               	movf	?___ftneg+1,w
   764  0472  00FC               	movwf	___ftadd@f2+1
   765  0473  0872               	movf	?___ftneg+2,w
   766  0474  00FD               	movwf	___ftadd@f2+2
   767  0475  120A  118A  26F1   	fcall	___ftadd
   768  0478  0878               	movf	?___ftadd,w
   769  0479  1283               	bcf	3,5	;RP0=0, select bank0
   770  047A  1303               	bcf	3,6	;RP1=0, select bank0
   771  047B  00A7               	movwf	?_modf
   772  047C  0879               	movf	?___ftadd+1,w
   773  047D  00A8               	movwf	?_modf+1
   774  047E  087A               	movf	?___ftadd+2,w
   775  047F  00A9               	movwf	?_modf+2
   776  0480  0008               	return
   777  0481                     __end_of_modf:	
   778                           
   779                           	psect	text3
   780  059F                     __ptext3:	
   781 ;; *************** function ___fttol *****************
   782 ;; Defined at:
   783 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\fttol.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  f1              3    0[COMMON] float 
   786 ;; Auto vars:     Size  Location     Type
   787 ;;  lval            4    9[COMMON] unsigned long 
   788 ;;  exp1            1   13[COMMON] unsigned char 
   789 ;;  sign1           1    8[COMMON] unsigned char 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  4    0[COMMON] long 
   792 ;; Registers used:
   793 ;;		wreg, status,2, status,0
   794 ;; Tracked objects:
   795 ;;		On entry : 0/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   799 ;;      Params:         4       0       0       0       0
   800 ;;      Locals:         6       0       0       0       0
   801 ;;      Temps:          4       0       0       0       0
   802 ;;      Totals:        14       0       0       0       0
   803 ;;Total ram usage:       14 bytes
   804 ;; Hardware stack levels used:    1
   805 ;; This function calls:
   806 ;;		Nothing
   807 ;; This function is called by:
   808 ;;		_main
   809 ;;		_modf
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           
   814                           ;psect for function ___fttol
   815  059F                     ___fttol:	
   816                           
   817                           ;incstack = 0
   818                           ; Regs used in ___fttol: [wreg+status,2+status,0]
   819  059F  0870               	movf	___fttol@f1,w
   820  05A0  00F4               	movwf	??___fttol
   821  05A1  0871               	movf	___fttol@f1+1,w
   822  05A2  00F5               	movwf	??___fttol+1
   823  05A3  0872               	movf	___fttol@f1+2,w
   824  05A4  00F6               	movwf	??___fttol+2
   825  05A5  1003               	clrc
   826  05A6  0D75               	rlf	??___fttol+1,w
   827  05A7  0D76               	rlf	??___fttol+2,w
   828  05A8  00F7               	movwf	??___fttol+3
   829  05A9  0877               	movf	??___fttol+3,w
   830  05AA  00FD               	movwf	___fttol@exp1
   831  05AB  08FD               	movf	___fttol@exp1,f
   832  05AC  1D03               	skipz
   833  05AD  2DB7               	goto	l1172
   834  05AE  3000               	movlw	0
   835  05AF  00F3               	movwf	?___fttol+3
   836  05B0  3000               	movlw	0
   837  05B1  00F2               	movwf	?___fttol+2
   838  05B2  3000               	movlw	0
   839  05B3  00F1               	movwf	?___fttol+1
   840  05B4  3000               	movlw	0
   841  05B5  00F0               	movwf	?___fttol
   842  05B6  0008               	return
   843  05B7                     l1172:	
   844  05B7  0870               	movf	___fttol@f1,w
   845  05B8  00F4               	movwf	??___fttol
   846  05B9  0871               	movf	___fttol@f1+1,w
   847  05BA  00F5               	movwf	??___fttol+1
   848  05BB  0872               	movf	___fttol@f1+2,w
   849  05BC  00F6               	movwf	??___fttol+2
   850  05BD  3017               	movlw	23
   851  05BE                     u1075:	
   852  05BE  1003               	clrc
   853  05BF  0CF6               	rrf	??___fttol+2,f
   854  05C0  0CF5               	rrf	??___fttol+1,f
   855  05C1  0CF4               	rrf	??___fttol,f
   856  05C2  3EFF               	addlw	-1
   857  05C3  1D03               	skipz
   858  05C4  2DBE               	goto	u1075
   859  05C5  0874               	movf	??___fttol,w
   860  05C6  00F7               	movwf	??___fttol+3
   861  05C7  0877               	movf	??___fttol+3,w
   862  05C8  00F8               	movwf	___fttol@sign1
   863  05C9  17F1               	bsf	___fttol@f1+1,7
   864  05CA  30FF               	movlw	255
   865  05CB  05F0               	andwf	___fttol@f1,f
   866  05CC  30FF               	movlw	255
   867  05CD  05F1               	andwf	___fttol@f1+1,f
   868  05CE  3000               	movlw	0
   869  05CF  05F2               	andwf	___fttol@f1+2,f
   870  05D0  0870               	movf	___fttol@f1,w
   871  05D1  00F9               	movwf	___fttol@lval
   872  05D2  0871               	movf	___fttol@f1+1,w
   873  05D3  00FA               	movwf	___fttol@lval+1
   874  05D4  0872               	movf	___fttol@f1+2,w
   875  05D5  00FB               	movwf	___fttol@lval+2
   876  05D6  01FC               	clrf	___fttol@lval+3
   877  05D7  308E               	movlw	142
   878  05D8  02FD               	subwf	___fttol@exp1,f
   879  05D9  1FFD               	btfss	___fttol@exp1,7
   880  05DA  2DF9               	goto	l1192
   881  05DB  087D               	movf	___fttol@exp1,w
   882  05DC  3A80               	xorlw	128
   883  05DD  3E8F               	addlw	143
   884  05DE  1803               	skipnc
   885  05DF  2DE9               	goto	l1190
   886  05E0  3000               	movlw	0
   887  05E1  00F3               	movwf	?___fttol+3
   888  05E2  3000               	movlw	0
   889  05E3  00F2               	movwf	?___fttol+2
   890  05E4  3000               	movlw	0
   891  05E5  00F1               	movwf	?___fttol+1
   892  05E6  3000               	movlw	0
   893  05E7  00F0               	movwf	?___fttol
   894  05E8  0008               	return
   895  05E9                     l1190:	
   896  05E9  3001               	movlw	1
   897  05EA                     u1105:	
   898  05EA  1003               	clrc
   899  05EB  0CFC               	rrf	___fttol@lval+3,f
   900  05EC  0CFB               	rrf	___fttol@lval+2,f
   901  05ED  0CFA               	rrf	___fttol@lval+1,f
   902  05EE  0CF9               	rrf	___fttol@lval,f
   903  05EF  3EFF               	addlw	-1
   904  05F0  1D03               	skipz
   905  05F1  2DEA               	goto	u1105
   906  05F2  3001               	movlw	1
   907  05F3  00F4               	movwf	??___fttol
   908  05F4  0874               	movf	??___fttol,w
   909  05F5  07FD               	addwf	___fttol@exp1,f
   910  05F6  1903               	btfsc	3,2
   911  05F7  2E14               	goto	l1202
   912  05F8  2DE9               	goto	l1190
   913  05F9                     l1192:	
   914  05F9  3018               	movlw	24
   915  05FA  027D               	subwf	___fttol@exp1,w
   916  05FB  1C03               	skipc
   917  05FC  2E11               	goto	l1200
   918  05FD  3000               	movlw	0
   919  05FE  00F3               	movwf	?___fttol+3
   920  05FF  3000               	movlw	0
   921  0600  00F2               	movwf	?___fttol+2
   922  0601  3000               	movlw	0
   923  0602  00F1               	movwf	?___fttol+1
   924  0603  3000               	movlw	0
   925  0604  00F0               	movwf	?___fttol
   926  0605  0008               	return
   927  0606                     l1198:	
   928  0606  3001               	movlw	1
   929  0607  00F4               	movwf	??___fttol
   930  0608                     u1135:	
   931  0608  1003               	clrc
   932  0609  0DF9               	rlf	___fttol@lval,f
   933  060A  0DFA               	rlf	___fttol@lval+1,f
   934  060B  0DFB               	rlf	___fttol@lval+2,f
   935  060C  0DFC               	rlf	___fttol@lval+3,f
   936  060D  0BF4               	decfsz	??___fttol,f
   937  060E  2E08               	goto	u1135
   938  060F  3001               	movlw	1
   939  0610  02FD               	subwf	___fttol@exp1,f
   940  0611                     l1200:	
   941  0611  08FD               	movf	___fttol@exp1,f
   942  0612  1D03               	skipz
   943  0613  2E06               	goto	l1198
   944  0614                     l1202:	
   945  0614  0878               	movf	___fttol@sign1,w
   946  0615  1903               	btfsc	3,2
   947  0616  2E22               	goto	l1206
   948  0617  09F9               	comf	___fttol@lval,f
   949  0618  09FA               	comf	___fttol@lval+1,f
   950  0619  09FB               	comf	___fttol@lval+2,f
   951  061A  09FC               	comf	___fttol@lval+3,f
   952  061B  0AF9               	incf	___fttol@lval,f
   953  061C  1903               	skipnz
   954  061D  0AFA               	incf	___fttol@lval+1,f
   955  061E  1903               	skipnz
   956  061F  0AFB               	incf	___fttol@lval+2,f
   957  0620  1903               	skipnz
   958  0621  0AFC               	incf	___fttol@lval+3,f
   959  0622                     l1206:	
   960  0622  087C               	movf	___fttol@lval+3,w
   961  0623  00F3               	movwf	?___fttol+3
   962  0624  087B               	movf	___fttol@lval+2,w
   963  0625  00F2               	movwf	?___fttol+2
   964  0626  087A               	movf	___fttol@lval+1,w
   965  0627  00F1               	movwf	?___fttol+1
   966  0628  0879               	movf	___fttol@lval,w
   967  0629  00F0               	movwf	?___fttol
   968  062A  0008               	return
   969  062B                     __end_of___fttol:	
   970                           
   971                           	psect	text4
   972  0372                     __ptext4:	
   973 ;; *************** function ___ftneg *****************
   974 ;; Defined at:
   975 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ftneg.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;  f1              3    0[COMMON] float 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  3    0[COMMON] float 
   982 ;; Registers used:
   983 ;;		wreg
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   989 ;;      Params:         3       0       0       0       0
   990 ;;      Locals:         0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0
   992 ;;      Totals:         3       0       0       0       0
   993 ;;Total ram usage:        3 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_modf
=======
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000D                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0013                     	;# 
    40  0014                     	;# 
    41  0015                     	;# 
    42  0015                     	;# 
    43  0016                     	;# 
    44  0017                     	;# 
    45  0018                     	;# 
    46  0019                     	;# 
    47  001A                     	;# 
    48  001B                     	;# 
    49  001B                     	;# 
    50  001C                     	;# 
    51  001D                     	;# 
    52  001E                     	;# 
    53  001F                     	;# 
    54  0081                     	;# 
    55  0085                     	;# 
    56  0086                     	;# 
    57  0087                     	;# 
    58  0088                     	;# 
    59  0089                     	;# 
    60  008C                     	;# 
    61  008D                     	;# 
    62  008E                     	;# 
    63  0091                     	;# 
    64  0092                     	;# 
    65  0093                     	;# 
    66  0094                     	;# 
    67  0098                     	;# 
    68  0099                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010D                     	;# 
    75  010E                     	;# 
    76  010F                     	;# 
    77  018C                     	;# 
    78  018D                     	;# 
    79  0040                     _RD0	set	64
    80  0041                     _RD1	set	65
    81  0044                     _RD4	set	68
    82  0045                     _RD5	set	69
    83  0046                     _RD6	set	70
    84  0047                     _RD7	set	71
    85  0085                     _TRISAbits	set	133
    86  0088                     _TRISD	set	136
    87                           
    88                           	psect	strings
    89  0003                     __pstrings:	
    90  0003                     stringtab:	
    91  0003                     __stringtab:	
    92  0003                     stringcode:	
    93                           ;	String table - string pointers are 1 byte each
    94                           
    95  0003                     stringdir:	
    96  0003  3000               	movlw	high stringdir
    97  0004  008A               	movwf	10
    98  0005  0804               	movf	4,w
    99  0006  0A84               	incf	4,f
   100  0007  0782               	addwf	2,f
   101  0008                     __stringbase:	
   102  0008  3400               	retlw	0
   103  0009                     __end_of__stringtab:	
   104  0009                     __stringdata:	
   105  0009                     STR_1:	
   106  0009  3450               	retlw	80	;'P'
   107  000A  3472               	retlw	114	;'r'
   108  000B  346F               	retlw	111	;'o'
   109  000C  3479               	retlw	121	;'y'
   110  000D  3465               	retlw	101	;'e'
   111  000E  3463               	retlw	99	;'c'
   112  000F  3474               	retlw	116	;'t'
   113  0010  346F               	retlw	111	;'o'
   114  0011  3420               	retlw	32	;' '
   115  0012  3441               	retlw	65	;'A'
   116  0013  346E               	retlw	110	;'n'
   117  0014  3474               	retlw	116	;'t'
   118  0015  3469               	retlw	105	;'i'
   119  0016  3472               	retlw	114	;'r'
   120  0017  346F               	retlw	111	;'o'
   121  0018  3462               	retlw	98	;'b'
   122  0019  346F               	retlw	111	;'o'
   123  001A  3400               	retlw	0
   124  001B                     STR_3:	
   125  001B  346D               	retlw	109	;'m'
   126  001C  3469               	retlw	105	;'i'
   127  001D  3464               	retlw	100	;'d'
   128  001E  3469               	retlw	105	;'i'
   129  001F  3465               	retlw	101	;'e'
   130  0020  346E               	retlw	110	;'n'
   131  0021  3464               	retlw	100	;'d'
   132  0022  346F               	retlw	111	;'o'
   133  0023  3420               	retlw	32	;' '
   134  0024  346C               	retlw	108	;'l'
   135  0025  3469               	retlw	105	;'i'
   136  0026  3474               	retlw	116	;'t'
   137  0027  3472               	retlw	114	;'r'
   138  0028  346F               	retlw	111	;'o'
   139  0029  3473               	retlw	115	;'s'
   140  002A  343A               	retlw	58	;':'
   141  002B  3400               	retlw	0
   142  002C                     STR_2:	
   143  002C  3464               	retlw	100	;'d'
   144  002D  3465               	retlw	101	;'e'
   145  002E  3420               	retlw	32	;' '
   146  002F  3467               	retlw	103	;'g'
   147  0030  3461               	retlw	97	;'a'
   148  0031  3473               	retlw	115	;'s'
   149  0032  346F               	retlw	111	;'o'
   150  0033  346C               	retlw	108	;'l'
   151  0034  3469               	retlw	105	;'i'
   152  0035  346E               	retlw	110	;'n'
   153  0036  3465               	retlw	101	;'e'
   154  0037  3472               	retlw	114	;'r'
   155  0038  3461               	retlw	97	;'a'
   156  0039  3473               	retlw	115	;'s'
   157  003A  3400               	retlw	0
   158  003B                     STR_4:	
   159  003B  3448               	retlw	72	;'H'
   160  003C  3465               	retlw	101	;'e'
   161  003D  3463               	retlw	99	;'c'
   162  003E  3468               	retlw	104	;'h'
   163  003F  346F               	retlw	111	;'o'
   164  0040  3420               	retlw	32	;' '
   165  0041  3470               	retlw	112	;'p'
   166  0042  346F               	retlw	111	;'o'
   167  0043  3472               	retlw	114	;'r'
   168  0044  3400               	retlw	0
   169  0045                     STR_5:	
   170  0045  3452               	retlw	82	;'R'
   171  0046  342E               	retlw	46	;'.'
   172  0047  3420               	retlw	32	;' '
   173  0048  3443               	retlw	67	;'C'
   174  0049  3465               	retlw	101	;'e'
   175  004A  346C               	retlw	108	;'l'
   176  004B  3469               	retlw	105	;'i'
   177  004C  3473               	retlw	115	;'s'
   178  004D  3400               	retlw	0
   179  004E                     __end_of__stringdata:	
   180                           
   181                           ; #config settings
   182  0000                     
   183                           	psect	cinit
   184  07F8                     start_initialization:	
   185  07F8                     __initialization:	
   186                           
   187                           ; Clear objects allocated to BANK0
   188  07F8  01A7               	clrf	__pbssBANK0& (0+127)
   189  07F9  01A8               	clrf	(__pbssBANK0+1)& (0+127)
   190  07FA  01A9               	clrf	(__pbssBANK0+2)& (0+127)
   191  07FB  01AA               	clrf	(__pbssBANK0+3)& (0+127)
   192  07FC                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195  07FC                     __end_of__initialization:	
   196  07FC  0183               	clrf	3
   197  07FD  120A  118A  2F27   	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	bssBANK0
   200  0027                     __pbssBANK0:	
   201  0027                     _TiempoPulso:	
   202  0027                     	ds	2
   203  0029                     _estado:	
   204  0029                     	ds	2
   205                           
   206                           	psect	cstackCOMMON
   207  0070                     __pcstackCOMMON:	
   208  0070                     ?_pic_init:	
   209  0070                     ??_pic_init:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_Lcd_Port:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ??_Lcd_Port:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_Lcd_Cmd:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_Lcd_Init:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_Lcd_Write_Char:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_Lcd_Write_String:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?_Lcd_Clear:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?_main:	
   234                           ; 2 bytes @ 0x0
   235                           
   236  0070                     Lcd_Port@a:	
   237                           ; 2 bytes @ 0x0
   238                           
   239                           
   240                           ; 1 bytes @ 0x0
   241  0070                     	ds	1
   242  0071                     ??_Lcd_Cmd:	
   243  0071                     ??_Lcd_Write_Char:	
   244                           ; 0 bytes @ 0x1
   245                           
   246                           
   247                           ; 0 bytes @ 0x1
   248  0071                     	ds	1
   249  0072                     Lcd_Write_Char@temp:	
   250                           
   251                           ; 1 bytes @ 0x2
   252  0072                     	ds	1
   253  0073                     Lcd_Cmd@a:	
   254  0073                     Lcd_Write_Char@y:	
   255                           ; 1 bytes @ 0x3
   256                           
   257                           
   258                           ; 1 bytes @ 0x3
   259  0073                     	ds	1
   260  0074                     ??_Lcd_Clear:	
   261  0074                     ?_Lcd_Set_Cursor:	
   262                           ; 0 bytes @ 0x4
   263                           
   264  0074                     ??_Lcd_Init:	
   265                           ; 0 bytes @ 0x4
   266                           
   267  0074                     Lcd_Set_Cursor@b:	
   268                           ; 0 bytes @ 0x4
   269                           
   270  0074                     Lcd_Write_Char@a:	
   271                           ; 1 bytes @ 0x4
   272                           
   273                           
   274                           ; 1 bytes @ 0x4
   275  0074                     	ds	1
   276  0075                     ??_Lcd_Set_Cursor:	
   277  0075                     ??_Lcd_Write_String:	
   278                           ; 0 bytes @ 0x5
   279                           
   280  0075                     Lcd_Write_String@i:	
   281                           ; 0 bytes @ 0x5
   282                           
   283                           
   284                           ; 2 bytes @ 0x5
   285  0075                     	ds	2
   286  0077                     Lcd_Set_Cursor@a:	
   287  0077                     Lcd_Write_String@a:	
   288                           ; 1 bytes @ 0x7
   289                           
   290                           
   291                           ; 1 bytes @ 0x7
   292  0077                     	ds	1
   293  0078                     Lcd_Set_Cursor@z:	
   294                           
   295                           ; 2 bytes @ 0x8
   296  0078                     	ds	2
   297  007A                     Lcd_Set_Cursor@y:	
   298                           
   299                           ; 2 bytes @ 0xA
   300  007A                     	ds	2
   301  007C                     Lcd_Set_Cursor@temp:	
   302                           
   303                           ; 2 bytes @ 0xC
   304  007C                     	ds	2
   305                           
   306                           	psect	cstackBANK0
   307  0020                     __pcstackBANK0:	
   308  0020                     ??_main:	
   309                           
   310                           ; 0 bytes @ 0x0
   311  0020                     	ds	3
   312  0023                     main@NuevaVar:	
   313                           
   314                           ; 2 bytes @ 0x3
   315  0023                     	ds	2
   316  0025                     main@numero:	
   317                           
   318                           ; 2 bytes @ 0x5
   319  0025                     	ds	2
   320                           
   321                           	psect	maintext
   322  0727                     __pmaintext:	
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 23 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  NuevaVar        2    3[BANK0 ] int 
   333 ;;  numero          2    5[BANK0 ] int 
   334 ;;  a               2    0        unsigned int 
   335 ;; Return value:  Size  Location     Type
   336 ;;                  2   68[COMMON] int 
   337 ;; Registers used:
   338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 17F/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   344 ;;      Params:         0       0       0       0       0
   345 ;;      Locals:         0       4       0       0       0
   346 ;;      Temps:          0       3       0       0       0
   347 ;;      Totals:         0       7       0       0       0
   348 ;;Total ram usage:        7 bytes
   349 ;; Hardware stack levels required when called:    3
   350 ;; This function calls:
   351 ;;		_Lcd_Clear
   352 ;;		_Lcd_Init
   353 ;;		_Lcd_Set_Cursor
   354 ;;		_Lcd_Write_Char
   355 ;;		_Lcd_Write_String
   356 ;;		_pic_init
   357 ;; This function is called by:
   358 ;;		Startup code after reset
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362                           
   363                           ;psect for function _main
   364  0727                     _main:	
   365                           
   366                           ;main.c: 25: unsigned int a;
   367                           ;main.c: 26: pic_init();
   368                           
   369                           ;incstack = 0
   370                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   371  0727  120A  118A  25D4  120A  118A  	fcall	_pic_init
   372                           
   373                           ;main.c: 27: Lcd_Init();
   374  072C  120A  118A  26CC  120A  118A  	fcall	_Lcd_Init
   375  0731                     l781:	
   376                           ;main.c: 32: while(1)
   377                           
   378                           
   379                           ;main.c: 33: {
   380                           ;main.c: 34: Lcd_Clear();
   381  0731  120A  118A  25DB  120A  118A  	fcall	_Lcd_Clear
   382                           
   383                           ;main.c: 35: Lcd_Set_Cursor(1,1);
   384  0736  01F4               	clrf	Lcd_Set_Cursor@b
   385  0737  0AF4               	incf	Lcd_Set_Cursor@b,f
   386  0738  3001               	movlw	1
   387  0739  120A  118A  2675  120A  118A  	fcall	_Lcd_Set_Cursor
   388                           
   389                           ;main.c: 36: Lcd_Write_String("Proyecto Antirobo");
   390  073E  3001               	movlw	(STR_1-__stringbase)& (0+255)
   391  073F  120A  118A  261A  120A  118A  	fcall	_Lcd_Write_String
   392                           
   393                           ;main.c: 37: Lcd_Set_Cursor(2,1);
   394  0744  01F4               	clrf	Lcd_Set_Cursor@b
   395  0745  0AF4               	incf	Lcd_Set_Cursor@b,f
   396  0746  3002               	movlw	2
   397  0747  120A  118A  2675  120A  118A  	fcall	_Lcd_Set_Cursor
   398                           
   399                           ;main.c: 38: Lcd_Write_String("de gasolineras");
   400  074C  3024               	movlw	(STR_2-__stringbase)& (0+255)
   401  074D  120A  118A  261A  120A  118A  	fcall	_Lcd_Write_String
   402                           
   403                           ;main.c: 39: _delay((unsigned long)((1000)*(8000000/4000.0)));
   404  0752  300B               	movlw	11
   405  0753  1283               	bcf	3,5	;RP0=0, select bank0
   406  0754  1303               	bcf	3,6	;RP1=0, select bank0
   407  0755  00A2               	movwf	??_main+2
   408  0756  3026               	movlw	38
   409  0757  00A1               	movwf	??_main+1
   410  0758  3066               	movlw	102
   411  0759  00A0               	movwf	??_main
   412  075A                     u257:	
   413  075A  0BA0               	decfsz	??_main,f
   414  075B  2F5A               	goto	u257
   415  075C  0BA1               	decfsz	??_main+1,f
   416  075D  2F5A               	goto	u257
   417  075E  0BA2               	decfsz	??_main+2,f
   418  075F  2F5A               	goto	u257
   419  0760  2F61               	nop2
   420                           
   421                           ;main.c: 40: Lcd_Clear();
   422  0761  120A  118A  25DB  120A  118A  	fcall	_Lcd_Clear
   423                           
   424                           ;main.c: 42: int numero;
   425                           ;main.c: 43: for(numero = 0; numero<= 10; numero++)
   426  0766  1283               	bcf	3,5	;RP0=0, select bank0
   427  0767  1303               	bcf	3,6	;RP1=0, select bank0
   428  0768  01A5               	clrf	main@numero
   429  0769  01A6               	clrf	main@numero+1
   430  076A  0826               	movf	main@numero+1,w
   431  076B  3A80               	xorlw	128
   432  076C  00FF               	movwf	127
   433  076D  3080               	movlw	128
   434  076E  027F               	subwf	127,w
   435  076F  1D03               	skipz
   436  0770  2F73               	goto	u235
   437  0771  300B               	movlw	11
   438  0772  0225               	subwf	main@numero,w
   439  0773                     u235:	
   440  0773  1803               	btfsc	3,0
   441  0774  2FC2               	goto	l817
   442  0775                     l799:	
   443                           
   444                           ;main.c: 44: {
   445                           ;main.c: 45: Lcd_Set_Cursor(1,1);
   446  0775  01F4               	clrf	Lcd_Set_Cursor@b
   447  0776  0AF4               	incf	Lcd_Set_Cursor@b,f
   448  0777  3001               	movlw	1
   449  0778  120A  118A  2675  120A  118A  	fcall	_Lcd_Set_Cursor
   450                           
   451                           ;main.c: 46: Lcd_Write_String("midiendo litros:");
   452  077D  3013               	movlw	(STR_3-__stringbase)& (0+255)
   453  077E  120A  118A  261A  120A  118A  	fcall	_Lcd_Write_String
   454                           
   455                           ;main.c: 47: Lcd_Set_Cursor(2,1);
   456  0783  01F4               	clrf	Lcd_Set_Cursor@b
   457  0784  0AF4               	incf	Lcd_Set_Cursor@b,f
   458  0785  3002               	movlw	2
   459  0786  120A  118A  2675  120A  118A  	fcall	_Lcd_Set_Cursor
   460                           
   461                           ;main.c: 48: int NuevaVar = numero+48;
   462  078B  1283               	bcf	3,5	;RP0=0, select bank0
   463  078C  1303               	bcf	3,6	;RP1=0, select bank0
   464  078D  0825               	movf	main@numero,w
   465  078E  3E30               	addlw	48
   466  078F  00A3               	movwf	main@NuevaVar
   467  0790  0826               	movf	main@numero+1,w
   468  0791  1803               	skipnc
   469  0792  3E01               	addlw	1
   470  0793  3E00               	addlw	0
   471  0794  00A4               	movwf	main@NuevaVar+1
   472                           
   473                           ;main.c: 49: Lcd_Write_Char(NuevaVar);
   474  0795  0823               	movf	main@NuevaVar,w
   475  0796  120A  118A  263C  120A  118A  	fcall	_Lcd_Write_Char
   476                           
   477                           ;main.c: 50: _delay((unsigned long)((1000)*(8000000/4000.0)));
   478  079B  300B               	movlw	11
   479  079C  1283               	bcf	3,5	;RP0=0, select bank0
   480  079D  1303               	bcf	3,6	;RP1=0, select bank0
   481  079E  00A2               	movwf	??_main+2
   482  079F  3026               	movlw	38
   483  07A0  00A1               	movwf	??_main+1
   484  07A1  3066               	movlw	102
   485  07A2  00A0               	movwf	??_main
   486  07A3                     u267:	
   487  07A3  0BA0               	decfsz	??_main,f
   488  07A4  2FA3               	goto	u267
   489  07A5  0BA1               	decfsz	??_main+1,f
   490  07A6  2FA3               	goto	u267
   491  07A7  0BA2               	decfsz	??_main+2,f
   492  07A8  2FA3               	goto	u267
   493  07A9  2FAA               	nop2
   494                           
   495                           ;main.c: 51: Lcd_Clear();
   496  07AA  120A  118A  25DB  120A  118A  	fcall	_Lcd_Clear
   497  07AF  3001               	movlw	1
   498  07B0  1283               	bcf	3,5	;RP0=0, select bank0
   499  07B1  1303               	bcf	3,6	;RP1=0, select bank0
   500  07B2  07A5               	addwf	main@numero,f
   501  07B3  1803               	skipnc
   502  07B4  0AA6               	incf	main@numero+1,f
   503  07B5  3000               	movlw	0
   504  07B6  07A6               	addwf	main@numero+1,f
   505  07B7  0826               	movf	main@numero+1,w
   506  07B8  3A80               	xorlw	128
   507  07B9  00FF               	movwf	127
   508  07BA  3080               	movlw	128
   509  07BB  027F               	subwf	127,w
   510  07BC  1D03               	skipz
   511  07BD  2FC0               	goto	u245
   512  07BE  300B               	movlw	11
   513  07BF  0225               	subwf	main@numero,w
   514  07C0                     u245:	
   515  07C0  1C03               	skipc
   516  07C1  2F75               	goto	l799
   517  07C2                     l817:	
   518                           
   519                           ;main.c: 52: }
   520                           ;main.c: 53: Lcd_Clear();
   521  07C2  120A  118A  25DB  120A  118A  	fcall	_Lcd_Clear
   522                           
   523                           ;main.c: 55: Lcd_Set_Cursor(1,1);
   524  07C7  01F4               	clrf	Lcd_Set_Cursor@b
   525  07C8  0AF4               	incf	Lcd_Set_Cursor@b,f
   526  07C9  3001               	movlw	1
   527  07CA  120A  118A  2675  120A  118A  	fcall	_Lcd_Set_Cursor
   528                           
   529                           ;main.c: 56: Lcd_Write_String("Hecho por");
   530  07CF  3033               	movlw	(STR_4-__stringbase)& (0+255)
   531  07D0  120A  118A  261A  120A  118A  	fcall	_Lcd_Write_String
   532                           
   533                           ;main.c: 57: Lcd_Set_Cursor(2,1);
   534  07D5  01F4               	clrf	Lcd_Set_Cursor@b
   535  07D6  0AF4               	incf	Lcd_Set_Cursor@b,f
   536  07D7  3002               	movlw	2
   537  07D8  120A  118A  2675  120A  118A  	fcall	_Lcd_Set_Cursor
   538                           
   539                           ;main.c: 58: Lcd_Write_String("R. Celis");
   540  07DD  303D               	movlw	(STR_5-__stringbase)& (0+255)
   541  07DE  120A  118A  261A  120A  118A  	fcall	_Lcd_Write_String
   542                           
   543                           ;main.c: 59: _delay((unsigned long)((1000)*(8000000/4000.0)));
   544  07E3  300B               	movlw	11
   545  07E4  1283               	bcf	3,5	;RP0=0, select bank0
   546  07E5  1303               	bcf	3,6	;RP1=0, select bank0
   547  07E6  00A2               	movwf	??_main+2
   548  07E7  3026               	movlw	38
   549  07E8  00A1               	movwf	??_main+1
   550  07E9  3066               	movlw	102
   551  07EA  00A0               	movwf	??_main
   552  07EB                     u277:	
   553  07EB  0BA0               	decfsz	??_main,f
   554  07EC  2FEB               	goto	u277
   555  07ED  0BA1               	decfsz	??_main+1,f
   556  07EE  2FEB               	goto	u277
   557  07EF  0BA2               	decfsz	??_main+2,f
   558  07F0  2FEB               	goto	u277
   559  07F1  2FF2               	nop2
   560                           
   561                           ;main.c: 60: Lcd_Clear();
   562  07F2  120A  118A  25DB  120A  118A  	fcall	_Lcd_Clear
   563  07F7  2F31               	goto	l781
   564  07F8                     __end_of_main:	
   565                           ;main.c: 62: }
   566                           ;main.c: 64: return 0;
   567                           ;	Return value of _main is never used
   568                           
   569                           
   570                           	psect	text1
   571  05D4                     __ptext1:	
   572 ;; *************** function _pic_init *****************
   573 ;; Defined at:
   574 ;;		line 10 in file "lcd.h"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;		None               void
   581 ;; Registers used:
   582 ;;		status,2
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   588 ;;      Params:         0       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0
   591 ;;      Totals:         0       0       0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_main
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           
   602                           ;psect for function _pic_init
   603  05D4                     _pic_init:	
   604                           
   605                           ;lcd.h: 12: TRISD = 0x00;
   606                           
   607                           ;incstack = 0
   608                           ; Regs used in _pic_init: [status,2]
   609  05D4  1683               	bsf	3,5	;RP0=1, select bank1
   610  05D5  1303               	bcf	3,6	;RP1=0, select bank1
   611  05D6  0188               	clrf	8	;volatile
   612                           
   613                           ;lcd.h: 14: TRISAbits.TRISA0 = 1;
   614  05D7  1405               	bsf	5,0	;volatile
   615                           
   616                           ;lcd.h: 16: TRISAbits.TRISA1 = 1;
   617  05D8  1485               	bsf	5,1	;volatile
   618                           
   619                           ;lcd.h: 18: TRISAbits.TRISA2 = 1;
   620  05D9  1505               	bsf	5,2	;volatile
   621  05DA  0008               	return
   622  05DB                     __end_of_pic_init:	
   623                           
   624                           	psect	text2
   625  061A                     __ptext2:	
   626 ;; *************** function _Lcd_Write_String *****************
   627 ;; Defined at:
   628 ;;		line 116 in file "lcd.h"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  a               1    wreg     PTR unsigned char 
   631 ;;		 -> STR_5(9), STR_4(10), STR_3(17), STR_2(15), 
   632 ;;		 -> STR_1(18), 
   633 ;; Auto vars:     Size  Location     Type
   634 ;;  a               1    7[COMMON] PTR unsigned char 
   635 ;;		 -> STR_5(9), STR_4(10), STR_3(17), STR_2(15), 
   636 ;;		 -> STR_1(18), 
   637 ;;  i               2    5[COMMON] int 
   638 ;; Return value:  Size  Location     Type
   639 ;;		None               void
   640 ;; Registers used:
   641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   647 ;;      Params:         0       0       0       0       0
   648 ;;      Locals:         3       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0
   650 ;;      Totals:         3       0       0       0       0
   651 ;;Total ram usage:        3 bytes
   652 ;; Hardware stack levels used:    1
   653 ;; Hardware stack levels required when called:    2
   654 ;; This function calls:
   655 ;;		_Lcd_Write_Char
   656 ;; This function is called by:
   657 ;;		_main
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           
   662                           ;psect for function _Lcd_Write_String
   663  061A                     _Lcd_Write_String:	
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   667                           ;Lcd_Write_String@a stored from wreg
   668  061A  00F7               	movwf	Lcd_Write_String@a
   669                           
   670                           ;lcd.h: 119: int i;
   671                           ;lcd.h: 120: for(i=0;a[i]!='\0';i++)
   672  061B  01F5               	clrf	Lcd_Write_String@i
   673  061C  01F6               	clrf	Lcd_Write_String@i+1
   674  061D                     l771:	
   675  061D  0875               	movf	Lcd_Write_String@i,w
   676  061E  0777               	addwf	Lcd_Write_String@a,w
   677  061F  0084               	movwf	4
   678  0620  120A  118A  2003  120A  118A  	fcall	stringdir
   679  0625  3800               	iorlw	0
   680  0626  1903               	btfsc	3,2
   681  0627  0008               	return
   682                           
   683                           ;lcd.h: 121: Lcd_Write_Char(a[i]);
   684  0628  0875               	movf	Lcd_Write_String@i,w
   685  0629  0777               	addwf	Lcd_Write_String@a,w
   686  062A  0084               	movwf	4
   687  062B  120A  118A  2003  120A  118A  	fcall	stringdir
   688  0630  120A  118A  263C  120A  118A  	fcall	_Lcd_Write_Char
   689  0635  3001               	movlw	1
   690  0636  07F5               	addwf	Lcd_Write_String@i,f
   691  0637  1803               	skipnc
   692  0638  0AF6               	incf	Lcd_Write_String@i+1,f
   693  0639  3000               	movlw	0
   694  063A  07F6               	addwf	Lcd_Write_String@i+1,f
   695  063B  2E1D               	goto	l771
   696  063C                     __end_of_Lcd_Write_String:	
   697                           
   698                           	psect	text3
   699  063C                     __ptext3:	
   700 ;; *************** function _Lcd_Write_Char *****************
   701 ;; Defined at:
   702 ;;		line 99 in file "lcd.h"
   703 ;; Parameters:    Size  Location     Type
   704 ;;  a               1    wreg     unsigned char 
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  a               1    4[COMMON] unsigned char 
   707 ;;  y               1    3[COMMON] unsigned char 
   708 ;;  temp            1    2[COMMON] unsigned char 
   709 ;; Return value:  Size  Location     Type
   710 ;;		None               void
   711 ;; Registers used:
   712 ;;		wreg, status,2, status,0, pclath, cstack
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   718 ;;      Params:         0       0       0       0       0
   719 ;;      Locals:         3       0       0       0       0
   720 ;;      Temps:          1       0       0       0       0
   721 ;;      Totals:         4       0       0       0       0
   722 ;;Total ram usage:        4 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; Hardware stack levels required when called:    1
   725 ;; This function calls:
   726 ;;		_Lcd_Port
   727 ;; This function is called by:
   728 ;;		_Lcd_Write_String
   729 ;;		_main
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function _Lcd_Write_Char
   735  063C                     _Lcd_Write_Char:	
   736                           
   737                           ;incstack = 0
   738                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   739                           ;Lcd_Write_Char@a stored from wreg
   740  063C  00F4               	movwf	Lcd_Write_Char@a
   741                           
   742                           ;lcd.h: 102: char temp,y;
   743                           ;lcd.h: 103: temp = a&0x0F;
   744  063D  0874               	movf	Lcd_Write_Char@a,w
   745  063E  390F               	andlw	15
   746  063F  00F1               	movwf	??_Lcd_Write_Char
   747  0640  0871               	movf	??_Lcd_Write_Char,w
   748  0641  00F2               	movwf	Lcd_Write_Char@temp
   749                           
   750                           ;lcd.h: 104: y = a&0xF0;
   751  0642  0874               	movf	Lcd_Write_Char@a,w
   752  0643  39F0               	andlw	240
   753  0644  00F1               	movwf	??_Lcd_Write_Char
   754  0645  0871               	movf	??_Lcd_Write_Char,w
   755  0646  00F3               	movwf	Lcd_Write_Char@y
   756                           
   757                           ;lcd.h: 105: RD1 = 1;
   758  0647  1283               	bcf	3,5	;RP0=0, select bank0
   759  0648  1303               	bcf	3,6	;RP1=0, select bank0
   760  0649  1488               	bsf	8,1	;volatile
   761                           
   762                           ;lcd.h: 106: Lcd_Port(y>>4);
   763  064A  0873               	movf	Lcd_Write_Char@y,w
   764  064B  00F1               	movwf	??_Lcd_Write_Char
   765  064C  3004               	movlw	4
   766  064D                     u175:	
   767  064D  1003               	clrc
   768  064E  0CF1               	rrf	??_Lcd_Write_Char,f
   769  064F  3EFF               	addlw	-1
   770  0650  1D03               	skipz
   771  0651  2E4D               	goto	u175
   772  0652  0871               	movf	??_Lcd_Write_Char,w
   773  0653  120A  118A  25E6  120A  118A  	fcall	_Lcd_Port
   774                           
   775                           ;lcd.h: 107: RD0 = 1;
   776  0658  1283               	bcf	3,5	;RP0=0, select bank0
   777  0659  1303               	bcf	3,6	;RP1=0, select bank0
   778  065A  1408               	bsf	8,0	;volatile
   779                           
   780                           ;lcd.h: 108: _delay((unsigned long)((40)*(8000000/4000000.0)));
   781  065B  301A               	movlw	26
   782  065C  00F1               	movwf	??_Lcd_Write_Char
   783  065D                     u287:	
   784  065D  0BF1               	decfsz	??_Lcd_Write_Char,f
   785  065E  2E5D               	goto	u287
   786  065F  0000               	nop
   787                           
   788                           ;lcd.h: 109: RD0 = 0;
   789  0660  1283               	bcf	3,5	;RP0=0, select bank0
   790  0661  1303               	bcf	3,6	;RP1=0, select bank0
   791  0662  1008               	bcf	8,0	;volatile
   792                           
   793                           ;lcd.h: 110: Lcd_Port(temp);
   794  0663  0872               	movf	Lcd_Write_Char@temp,w
   795  0664  120A  118A  25E6  120A  118A  	fcall	_Lcd_Port
   796                           
   797                           ;lcd.h: 111: RD0 = 1;
   798  0669  1283               	bcf	3,5	;RP0=0, select bank0
   799  066A  1303               	bcf	3,6	;RP1=0, select bank0
   800  066B  1408               	bsf	8,0	;volatile
   801                           
   802                           ;lcd.h: 112: _delay((unsigned long)((40)*(8000000/4000000.0)));
   803  066C  301A               	movlw	26
   804  066D  00F1               	movwf	??_Lcd_Write_Char
   805  066E                     u297:	
   806  066E  0BF1               	decfsz	??_Lcd_Write_Char,f
   807  066F  2E6E               	goto	u297
   808  0670  0000               	nop
   809                           
   810                           ;lcd.h: 113: RD0 = 0;
   811  0671  1283               	bcf	3,5	;RP0=0, select bank0
   812  0672  1303               	bcf	3,6	;RP1=0, select bank0
   813  0673  1008               	bcf	8,0	;volatile
   814  0674  0008               	return
   815  0675                     __end_of_Lcd_Write_Char:	
   816                           
   817                           	psect	text4
   818  0675                     __ptext4:	
   819 ;; *************** function _Lcd_Set_Cursor *****************
   820 ;; Defined at:
   821 ;;		line 58 in file "lcd.h"
   822 ;; Parameters:    Size  Location     Type
   823 ;;  a               1    wreg     unsigned char 
   824 ;;  b               1    4[COMMON] unsigned char 
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  a               1    7[COMMON] unsigned char 
   827 ;;  temp            2   12[COMMON] int 
   828 ;;  y               2   10[COMMON] int 
   829 ;;  z               2    8[COMMON] int 
   830 ;; Return value:  Size  Location     Type
   831 ;;		None               void
   832 ;; Registers used:
   833 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   834 ;; Tracked objects:
   835 ;;		On entry : 0/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   839 ;;      Params:         1       0       0       0       0
   840 ;;      Locals:         7       0       0       0       0
   841 ;;      Temps:          2       0       0       0       0
   842 ;;      Totals:        10       0       0       0       0
   843 ;;Total ram usage:       10 bytes
   844 ;; Hardware stack levels used:    1
   845 ;; Hardware stack levels required when called:    2
   846 ;; This function calls:
   847 ;;		_Lcd_Cmd
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           
   854                           ;psect for function _Lcd_Set_Cursor
   855  0675                     _Lcd_Set_Cursor:	
   856                           
   857                           ;incstack = 0
   858                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   859                           ;Lcd_Set_Cursor@a stored from wreg
   860  0675  00F7               	movwf	Lcd_Set_Cursor@a
   861                           
   862                           ;lcd.h: 60: int temp,z,y;
   863                           ;lcd.h: 61: if(a == 1)
   864  0676  0877               	movf	Lcd_Set_Cursor@a,w
   865  0677  3A01               	xorlw	1
   866  0678  1D03               	skipz
   867  0679  2EA1               	goto	l743
   868                           
   869                           ;lcd.h: 62: {
   870                           ;lcd.h: 63: temp = 0x80 + b - 1;
   871  067A  0874               	movf	Lcd_Set_Cursor@b,w
   872  067B  3E7F               	addlw	127
   873  067C  00FC               	movwf	Lcd_Set_Cursor@temp
   874  067D  3000               	movlw	0
   875  067E  1803               	skipnc
   876  067F  3001               	movlw	1
   877  0680  00FD               	movwf	Lcd_Set_Cursor@temp+1
   878                           
   879                           ;lcd.h: 64: z = temp>>4;
   880  0681  087D               	movf	Lcd_Set_Cursor@temp+1,w
   881  0682  00F6               	movwf	??_Lcd_Set_Cursor+1
   882  0683  087C               	movf	Lcd_Set_Cursor@temp,w
   883  0684  00F5               	movwf	??_Lcd_Set_Cursor
   884  0685  3004               	movlw	4
   885  0686  00FF               	movwf	127
   886  0687                     u195:	
   887  0687  0D76               	rlf	??_Lcd_Set_Cursor+1,w
   888  0688  0CF6               	rrf	??_Lcd_Set_Cursor+1,f
   889  0689  0CF5               	rrf	??_Lcd_Set_Cursor,f
   890  068A  0BFF               	decfsz	127,f
   891  068B  2E87               	goto	u195
   892  068C  0875               	movf	??_Lcd_Set_Cursor,w
   893  068D  00F8               	movwf	Lcd_Set_Cursor@z
   894  068E  0876               	movf	??_Lcd_Set_Cursor+1,w
   895  068F  00F9               	movwf	Lcd_Set_Cursor@z+1
   896                           
   897                           ;lcd.h: 65: y = temp & 0x0F;
   898  0690  300F               	movlw	15
   899  0691  057C               	andwf	Lcd_Set_Cursor@temp,w
   900  0692  00FA               	movwf	Lcd_Set_Cursor@y
   901  0693  3000               	movlw	0
   902  0694  057D               	andwf	Lcd_Set_Cursor@temp+1,w
   903  0695  00FB               	movwf	Lcd_Set_Cursor@y+1
   904                           
   905                           ;lcd.h: 66: Lcd_Cmd(z);
   906  0696  0878               	movf	Lcd_Set_Cursor@z,w
   907  0697  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
   908                           
   909                           ;lcd.h: 67: Lcd_Cmd(y);
   910  069C  087A               	movf	Lcd_Set_Cursor@y,w
   911  069D  120A  118A  2600   	fcall	_Lcd_Cmd
   912                           
   913                           ;lcd.h: 68: }
   914  06A0  0008               	return
   915  06A1                     l743:	
   916                           
   917                           ;lcd.h: 69: else if(a == 2)
   918  06A1  0877               	movf	Lcd_Set_Cursor@a,w
   919  06A2  3A02               	xorlw	2
   920  06A3  1D03               	skipz
   921  06A4  0008               	return
   922                           
   923                           ;lcd.h: 70: {
   924                           ;lcd.h: 71: temp = 0xC0 + b - 1;
   925  06A5  0874               	movf	Lcd_Set_Cursor@b,w
   926  06A6  3EBF               	addlw	191
   927  06A7  00FC               	movwf	Lcd_Set_Cursor@temp
   928  06A8  3000               	movlw	0
   929  06A9  1803               	skipnc
   930  06AA  3001               	movlw	1
   931  06AB  00FD               	movwf	Lcd_Set_Cursor@temp+1
   932                           
   933                           ;lcd.h: 72: z = temp>>4;
   934  06AC  087D               	movf	Lcd_Set_Cursor@temp+1,w
   935  06AD  00F6               	movwf	??_Lcd_Set_Cursor+1
   936  06AE  087C               	movf	Lcd_Set_Cursor@temp,w
   937  06AF  00F5               	movwf	??_Lcd_Set_Cursor
   938  06B0  3004               	movlw	4
   939  06B1  00FF               	movwf	127
   940  06B2                     u215:	
   941  06B2  0D76               	rlf	??_Lcd_Set_Cursor+1,w
   942  06B3  0CF6               	rrf	??_Lcd_Set_Cursor+1,f
   943  06B4  0CF5               	rrf	??_Lcd_Set_Cursor,f
   944  06B5  0BFF               	decfsz	127,f
   945  06B6  2EB2               	goto	u215
   946  06B7  0875               	movf	??_Lcd_Set_Cursor,w
   947  06B8  00F8               	movwf	Lcd_Set_Cursor@z
   948  06B9  0876               	movf	??_Lcd_Set_Cursor+1,w
   949  06BA  00F9               	movwf	Lcd_Set_Cursor@z+1
   950                           
   951                           ;lcd.h: 73: y = temp & 0x0F;
   952  06BB  300F               	movlw	15
   953  06BC  057C               	andwf	Lcd_Set_Cursor@temp,w
   954  06BD  00FA               	movwf	Lcd_Set_Cursor@y
   955  06BE  3000               	movlw	0
   956  06BF  057D               	andwf	Lcd_Set_Cursor@temp+1,w
   957  06C0  00FB               	movwf	Lcd_Set_Cursor@y+1
   958                           
   959                           ;lcd.h: 74: Lcd_Cmd(z);
   960  06C1  0878               	movf	Lcd_Set_Cursor@z,w
   961  06C2  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
   962                           
   963                           ;lcd.h: 75: Lcd_Cmd(y);
   964  06C7  087A               	movf	Lcd_Set_Cursor@y,w
   965  06C8  120A  118A  2600   	fcall	_Lcd_Cmd
   966  06CB  0008               	return
   967  06CC                     __end_of_Lcd_Set_Cursor:	
   968                           
   969                           	psect	text5
   970  06CC                     __ptext5:	
   971 ;; *************** function _Lcd_Init *****************
   972 ;; Defined at:
   973 ;;		line 79 in file "lcd.h"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;		None
   978 ;; Return value:  Size  Location     Type
   979 ;;		None               void
   980 ;; Registers used:
   981 ;;		wreg, status,2, status,0, pclath, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   987 ;;      Params:         0       0       0       0       0
   988 ;;      Locals:         0       0       0       0       0
   989 ;;      Temps:          2       0       0       0       0
   990 ;;      Totals:         2       0       0       0       0
   991 ;;Total ram usage:        2 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; Hardware stack levels required when called:    2
   994 ;; This function calls:
   995 ;;		_Lcd_Cmd
   996 ;;		_Lcd_Port
   997 ;; This function is called by:
   998 ;;		_main
>>>>>>> origin/master
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           
<<<<<<< HEAD
  1003                           ;psect for function ___ftneg
  1004  0372                     ___ftneg:	
  1005                           
  1006                           ;incstack = 0
  1007                           ; Regs used in ___ftneg: [wreg]
  1008  0372  0872               	movf	___ftneg@f1+2,w
  1009  0373  0471               	iorwf	___ftneg@f1+1,w
  1010  0374  0470               	iorwf	___ftneg@f1,w
  1011  0375  1903               	skipnz
  1012  0376  0008               	return
  1013  0377  3080               	movlw	128
  1014  0378  06F2               	xorwf	___ftneg@f1+2,f
  1015  0379  0008               	return
  1016  037A                     __end_of___ftneg:	
  1017                           
  1018                           	psect	text5
  1019  06F1                     __ptext5:	
  1020 ;; *************** function ___ftadd *****************
  1021 ;; Defined at:
  1022 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\ftadd.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  f1              3    8[COMMON] float 
  1025 ;;  f2              3   11[COMMON] float 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  exp1            1    6[BANK0 ] unsigned char 
  1028 ;;  exp2            1    5[BANK0 ] unsigned char 
  1029 ;;  sign            1    4[BANK0 ] unsigned char 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  3    8[COMMON] float 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0, pclath, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1039 ;;      Params:         6       0       0       0       0
  1040 ;;      Locals:         0       3       0       0       0
  1041 ;;      Temps:          0       4       0       0       0
  1042 ;;      Totals:         6       7       0       0       0
  1043 ;;Total ram usage:       13 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    1
  1046 ;; This function calls:
  1047 ;;		___ftpack
  1048 ;; This function is called by:
  1049 ;;		_modf
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           
  1054                           ;psect for function ___ftadd
  1055  06F1                     ___ftadd:	
  1056                           
  1057                           ;incstack = 0
  1058                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  1059  06F1  0878               	movf	___ftadd@f1,w
  1060  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1061  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1062  06F4  00A0               	movwf	??___ftadd
  1063  06F5  0879               	movf	___ftadd@f1+1,w
  1064  06F6  00A1               	movwf	??___ftadd+1
  1065  06F7  087A               	movf	___ftadd@f1+2,w
  1066  06F8  00A2               	movwf	??___ftadd+2
  1067  06F9  1003               	clrc
  1068  06FA  0D21               	rlf	??___ftadd+1,w
  1069  06FB  0D22               	rlf	??___ftadd+2,w
  1070  06FC  00A3               	movwf	??___ftadd+3
  1071  06FD  0823               	movf	??___ftadd+3,w
  1072  06FE  00A6               	movwf	___ftadd@exp1
  1073  06FF  087B               	movf	___ftadd@f2,w
  1074  0700  00A0               	movwf	??___ftadd
  1075  0701  087C               	movf	___ftadd@f2+1,w
  1076  0702  00A1               	movwf	??___ftadd+1
  1077  0703  087D               	movf	___ftadd@f2+2,w
  1078  0704  00A2               	movwf	??___ftadd+2
  1079  0705  1003               	clrc
  1080  0706  0D21               	rlf	??___ftadd+1,w
  1081  0707  0D22               	rlf	??___ftadd+2,w
  1082  0708  00A3               	movwf	??___ftadd+3
  1083  0709  0823               	movf	??___ftadd+3,w
  1084  070A  00A5               	movwf	___ftadd@exp2
  1085  070B  0826               	movf	___ftadd@exp1,w
  1086  070C  1903               	btfsc	3,2
  1087  070D  2F1A               	goto	l1270
  1088  070E  0825               	movf	___ftadd@exp2,w
  1089  070F  0226               	subwf	___ftadd@exp1,w
  1090  0710  1803               	skipnc
  1091  0711  2F21               	goto	l1274
  1092  0712  0326               	decf	___ftadd@exp1,w
  1093  0713  3AFF               	xorlw	255
  1094  0714  0725               	addwf	___ftadd@exp2,w
  1095  0715  00A0               	movwf	??___ftadd
  1096  0716  3019               	movlw	25
  1097  0717  0220               	subwf	??___ftadd,w
  1098  0718  1C03               	skipc
  1099  0719  2F21               	goto	l1274
  1100  071A                     l1270:	
  1101  071A  087B               	movf	___ftadd@f2,w
  1102  071B  00F8               	movwf	?___ftadd
  1103  071C  087C               	movf	___ftadd@f2+1,w
  1104  071D  00F9               	movwf	?___ftadd+1
  1105  071E  087D               	movf	___ftadd@f2+2,w
  1106  071F  00FA               	movwf	?___ftadd+2
  1107  0720  0008               	return
  1108  0721                     l1274:	
  1109  0721  0825               	movf	___ftadd@exp2,w
  1110  0722  1903               	btfsc	3,2
  1111  0723  0008               	return
  1112  0724  0826               	movf	___ftadd@exp1,w
  1113  0725  0225               	subwf	___ftadd@exp2,w
  1114  0726  1803               	skipnc
  1115  0727  2F30               	goto	l1280
  1116  0728  0325               	decf	___ftadd@exp2,w
  1117  0729  3AFF               	xorlw	255
  1118  072A  0726               	addwf	___ftadd@exp1,w
  1119  072B  00A0               	movwf	??___ftadd
  1120  072C  3019               	movlw	25
  1121  072D  0220               	subwf	??___ftadd,w
  1122  072E  1803               	btfsc	3,0
  1123  072F  0008               	return
  1124  0730                     l1280:	
  1125  0730  3006               	movlw	6
  1126  0731  00A0               	movwf	??___ftadd
  1127  0732  0820               	movf	??___ftadd,w
  1128  0733  00A4               	movwf	___ftadd@sign
  1129  0734  1BFA               	btfsc	___ftadd@f1+2,7
  1130  0735  17A4               	bsf	___ftadd@sign,7
  1131  0736  1BFD               	btfsc	___ftadd@f2+2,7
  1132  0737  1724               	bsf	___ftadd@sign,6
  1133  0738  17F9               	bsf	___ftadd@f1+1,7
  1134  0739  30FF               	movlw	255
  1135  073A  05F8               	andwf	___ftadd@f1,f
  1136  073B  30FF               	movlw	255
  1137  073C  05F9               	andwf	___ftadd@f1+1,f
  1138  073D  3000               	movlw	0
  1139  073E  05FA               	andwf	___ftadd@f1+2,f
  1140  073F  17FC               	bsf	___ftadd@f2+1,7
  1141  0740  30FF               	movlw	255
  1142  0741  05FB               	andwf	___ftadd@f2,f
  1143  0742  30FF               	movlw	255
  1144  0743  05FC               	andwf	___ftadd@f2+1,f
  1145  0744  3000               	movlw	0
  1146  0745  05FD               	andwf	___ftadd@f2+2,f
  1147  0746  0825               	movf	___ftadd@exp2,w
  1148  0747  0226               	subwf	___ftadd@exp1,w
  1149  0748  1803               	skipnc
  1150  0749  2F70               	goto	l1302
  1151  074A                     l1292:	
  1152  074A  3001               	movlw	1
  1153  074B                     u1315:	
  1154  074B  1003               	clrc
  1155  074C  0DFB               	rlf	___ftadd@f2,f
  1156  074D  0DFC               	rlf	___ftadd@f2+1,f
  1157  074E  0DFD               	rlf	___ftadd@f2+2,f
  1158  074F  3EFF               	addlw	-1
  1159  0750  1D03               	skipz
  1160  0751  2F4B               	goto	u1315
  1161  0752  3001               	movlw	1
  1162  0753  02A5               	subwf	___ftadd@exp2,f
  1163  0754  0825               	movf	___ftadd@exp2,w
  1164  0755  0626               	xorwf	___ftadd@exp1,w
  1165  0756  1903               	skipnz
  1166  0757  2F6B               	goto	l1300
  1167  0758  3001               	movlw	1
  1168  0759  02A4               	subwf	___ftadd@sign,f
  1169  075A  0824               	movf	___ftadd@sign,w
  1170  075B  3907               	andlw	7
  1171  075C  1903               	btfsc	3,2
  1172  075D  2F6B               	goto	l1300
  1173  075E  2F4A               	goto	l1292
  1174  075F                     l1298:	
  1175  075F  3001               	movlw	1
  1176  0760                     u1345:	
  1177  0760  1003               	clrc
  1178  0761  0CFA               	rrf	___ftadd@f1+2,f
  1179  0762  0CF9               	rrf	___ftadd@f1+1,f
  1180  0763  0CF8               	rrf	___ftadd@f1,f
  1181  0764  3EFF               	addlw	-1
  1182  0765  1D03               	skipz
  1183  0766  2F60               	goto	u1345
  1184  0767  3001               	movlw	1
  1185  0768  00A0               	movwf	??___ftadd
  1186  0769  0820               	movf	??___ftadd,w
  1187  076A  07A6               	addwf	___ftadd@exp1,f
  1188  076B                     l1300:	
  1189  076B  0826               	movf	___ftadd@exp1,w
  1190  076C  0625               	xorwf	___ftadd@exp2,w
  1191  076D  1903               	btfsc	3,2
  1192  076E  2F99               	goto	l330
  1193  076F  2F5F               	goto	l1298
  1194  0770                     l1302:	
  1195  0770  0826               	movf	___ftadd@exp1,w
  1196  0771  0225               	subwf	___ftadd@exp2,w
  1197  0772  1803               	skipnc
  1198  0773  2F99               	goto	l330
  1199  0774                     l1304:	
  1200  0774  3001               	movlw	1
  1201  0775                     u1375:	
  1202  0775  1003               	clrc
  1203  0776  0DF8               	rlf	___ftadd@f1,f
  1204  0777  0DF9               	rlf	___ftadd@f1+1,f
  1205  0778  0DFA               	rlf	___ftadd@f1+2,f
  1206  0779  3EFF               	addlw	-1
  1207  077A  1D03               	skipz
  1208  077B  2F75               	goto	u1375
  1209  077C  3001               	movlw	1
  1210  077D  02A6               	subwf	___ftadd@exp1,f
  1211  077E  0825               	movf	___ftadd@exp2,w
  1212  077F  0626               	xorwf	___ftadd@exp1,w
  1213  0780  1903               	skipnz
  1214  0781  2F95               	goto	l1312
  1215  0782  3001               	movlw	1
  1216  0783  02A4               	subwf	___ftadd@sign,f
  1217  0784  0824               	movf	___ftadd@sign,w
  1218  0785  3907               	andlw	7
  1219  0786  1903               	btfsc	3,2
  1220  0787  2F95               	goto	l1312
  1221  0788  2F74               	goto	l1304
  1222  0789                     l1310:	
  1223  0789  3001               	movlw	1
  1224  078A                     u1405:	
  1225  078A  1003               	clrc
  1226  078B  0CFD               	rrf	___ftadd@f2+2,f
  1227  078C  0CFC               	rrf	___ftadd@f2+1,f
  1228  078D  0CFB               	rrf	___ftadd@f2,f
  1229  078E  3EFF               	addlw	-1
  1230  078F  1D03               	skipz
  1231  0790  2F8A               	goto	u1405
  1232  0791  3001               	movlw	1
  1233  0792  00A0               	movwf	??___ftadd
  1234  0793  0820               	movf	??___ftadd,w
  1235  0794  07A5               	addwf	___ftadd@exp2,f
  1236  0795                     l1312:	
  1237  0795  0826               	movf	___ftadd@exp1,w
  1238  0796  0625               	xorwf	___ftadd@exp2,w
  1239  0797  1D03               	skipz
  1240  0798  2F89               	goto	l1310
  1241  0799                     l330:	
  1242  0799  1FA4               	btfss	___ftadd@sign,7
  1243  079A  2FAB               	goto	l1316
  1244  079B  30FF               	movlw	255
  1245  079C  06F8               	xorwf	___ftadd@f1,f
  1246  079D  30FF               	movlw	255
  1247  079E  06F9               	xorwf	___ftadd@f1+1,f
  1248  079F  30FF               	movlw	255
  1249  07A0  06FA               	xorwf	___ftadd@f1+2,f
  1250  07A1  3001               	movlw	1
  1251  07A2  07F8               	addwf	___ftadd@f1,f
  1252  07A3  3000               	movlw	0
  1253  07A4  1803               	skipnc
  1254  07A5  3001               	movlw	1
  1255  07A6  07F9               	addwf	___ftadd@f1+1,f
  1256  07A7  3000               	movlw	0
  1257  07A8  1803               	skipnc
  1258  07A9  3001               	movlw	1
  1259  07AA  07FA               	addwf	___ftadd@f1+2,f
  1260  07AB                     l1316:	
  1261  07AB  1F24               	btfss	___ftadd@sign,6
  1262  07AC  2FBD               	goto	l1320
  1263  07AD  30FF               	movlw	255
  1264  07AE  06FB               	xorwf	___ftadd@f2,f
  1265  07AF  30FF               	movlw	255
  1266  07B0  06FC               	xorwf	___ftadd@f2+1,f
  1267  07B1  30FF               	movlw	255
  1268  07B2  06FD               	xorwf	___ftadd@f2+2,f
  1269  07B3  3001               	movlw	1
  1270  07B4  07FB               	addwf	___ftadd@f2,f
  1271  07B5  3000               	movlw	0
  1272  07B6  1803               	skipnc
  1273  07B7  3001               	movlw	1
  1274  07B8  07FC               	addwf	___ftadd@f2+1,f
  1275  07B9  3000               	movlw	0
  1276  07BA  1803               	skipnc
  1277  07BB  3001               	movlw	1
  1278  07BC  07FD               	addwf	___ftadd@f2+2,f
  1279  07BD                     l1320:	
  1280  07BD  01A4               	clrf	___ftadd@sign
  1281  07BE  0878               	movf	___ftadd@f1,w
  1282  07BF  07FB               	addwf	___ftadd@f2,f
  1283  07C0  0879               	movf	___ftadd@f1+1,w
  1284  07C1  1103               	clrz
  1285  07C2  1803               	skipnc
  1286  07C3  0A79               	incf	___ftadd@f1+1,w
  1287  07C4  1D03               	btfss	3,2
  1288  07C5  07FC               	addwf	___ftadd@f2+1,f
  1289  07C6  087A               	movf	___ftadd@f1+2,w
  1290  07C7  1103               	clrz
  1291  07C8  1803               	skipnc
  1292  07C9  0A7A               	incf	___ftadd@f1+2,w
  1293  07CA  1D03               	btfss	3,2
  1294  07CB  07FD               	addwf	___ftadd@f2+2,f
  1295  07CC  1FFD               	btfss	___ftadd@f2+2,7
  1296  07CD  2FE0               	goto	l1330
  1297  07CE  30FF               	movlw	255
  1298  07CF  06FB               	xorwf	___ftadd@f2,f
  1299  07D0  30FF               	movlw	255
  1300  07D1  06FC               	xorwf	___ftadd@f2+1,f
  1301  07D2  30FF               	movlw	255
  1302  07D3  06FD               	xorwf	___ftadd@f2+2,f
  1303  07D4  3001               	movlw	1
  1304  07D5  07FB               	addwf	___ftadd@f2,f
  1305  07D6  3000               	movlw	0
  1306  07D7  1803               	skipnc
  1307  07D8  3001               	movlw	1
  1308  07D9  07FC               	addwf	___ftadd@f2+1,f
  1309  07DA  3000               	movlw	0
  1310  07DB  1803               	skipnc
  1311  07DC  3001               	movlw	1
  1312  07DD  07FD               	addwf	___ftadd@f2+2,f
  1313  07DE  01A4               	clrf	___ftadd@sign
  1314  07DF  0AA4               	incf	___ftadd@sign,f
  1315  07E0                     l1330:	
  1316  07E0  087B               	movf	___ftadd@f2,w
  1317  07E1  00F0               	movwf	___ftpack@arg
  1318  07E2  087C               	movf	___ftadd@f2+1,w
  1319  07E3  00F1               	movwf	___ftpack@arg+1
  1320  07E4  087D               	movf	___ftadd@f2+2,w
  1321  07E5  00F2               	movwf	___ftpack@arg+2
  1322  07E6  0826               	movf	___ftadd@exp1,w
  1323  07E7  00A0               	movwf	??___ftadd
  1324  07E8  0820               	movf	??___ftadd,w
  1325  07E9  00F3               	movwf	___ftpack@exp
  1326  07EA  0824               	movf	___ftadd@sign,w
  1327  07EB  00A1               	movwf	??___ftadd+1
  1328  07EC  0821               	movf	??___ftadd+1,w
  1329  07ED  00F4               	movwf	___ftpack@sign
  1330  07EE  120A  118A  2537   	fcall	___ftpack
  1331  07F1  0870               	movf	?___ftpack,w
  1332  07F2  00F8               	movwf	?___ftadd
  1333  07F3  0871               	movf	?___ftpack+1,w
  1334  07F4  00F9               	movwf	?___ftadd+1
  1335  07F5  0872               	movf	?___ftpack+2,w
  1336  07F6  00FA               	movwf	?___ftadd+2
  1337  07F7  0008               	return
  1338  07F8                     __end_of___ftadd:	
  1339                           
  1340                           	psect	text6
  1341  03D1                     __ptext6:	
  1342 ;; *************** function ___attoft *****************
  1343 ;; Defined at:
  1344 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\attoft.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  c               3    0[BANK0 ] m
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  sign            1    5[BANK0 ] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  3    0[BANK0 ] float 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0, pclath, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1358 ;;      Params:         0       3       0       0       0
  1359 ;;      Locals:         0       1       0       0       0
  1360 ;;      Temps:          0       2       0       0       0
  1361 ;;      Totals:         0       6       0       0       0
  1362 ;;Total ram usage:        6 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    1
  1365 ;; This function calls:
  1366 ;;		___ftpack
  1367 ;; This function is called by:
  1368 ;;		_modf
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           
  1373                           ;psect for function ___attoft
  1374  03D1                     ___attoft:	
  1375                           
  1376                           ;incstack = 0
  1377                           ; Regs used in ___attoft: [wreg+status,2+status,0+pclath+cstack]
  1378  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  1379  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  1380  03D3  01A5               	clrf	___attoft@sign
  1381  03D4  1FA2               	btfss	___attoft@c+2,7
  1382  03D5  2BE0               	goto	l1258
  1383  03D6  09A0               	comf	___attoft@c,f
  1384  03D7  09A1               	comf	___attoft@c+1,f
  1385  03D8  09A2               	comf	___attoft@c+2,f
  1386  03D9  0AA0               	incf	___attoft@c,f
  1387  03DA  1903               	skipnz
  1388  03DB  0AA1               	incf	___attoft@c+1,f
  1389  03DC  1903               	skipnz
  1390  03DD  0AA2               	incf	___attoft@c+2,f
  1391  03DE  01A5               	clrf	___attoft@sign
  1392  03DF  0AA5               	incf	___attoft@sign,f
  1393  03E0                     l1258:	
  1394  03E0  0820               	movf	___attoft@c,w
  1395  03E1  00F0               	movwf	___ftpack@arg
  1396  03E2  0821               	movf	___attoft@c+1,w
  1397  03E3  00F1               	movwf	___ftpack@arg+1
  1398  03E4  0822               	movf	___attoft@c+2,w
  1399  03E5  00F2               	movwf	___ftpack@arg+2
  1400  03E6  308E               	movlw	142
  1401  03E7  00A3               	movwf	??___attoft
  1402  03E8  0823               	movf	??___attoft,w
  1403  03E9  00F3               	movwf	___ftpack@exp
  1404  03EA  0825               	movf	___attoft@sign,w
  1405  03EB  00A4               	movwf	??___attoft+1
  1406  03EC  0824               	movf	??___attoft+1,w
  1407  03ED  00F4               	movwf	___ftpack@sign
  1408  03EE  120A  118A  2537   	fcall	___ftpack
  1409  03F1  0870               	movf	?___ftpack,w
  1410  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  1411  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  1412  03F4  00A0               	movwf	?___attoft
  1413  03F5  0871               	movf	?___ftpack+1,w
  1414  03F6  00A1               	movwf	?___attoft+1
  1415  03F7  0872               	movf	?___ftpack+2,w
  1416  03F8  00A2               	movwf	?___attoft+2
  1417  03F9  0008               	return
  1418  03FA                     __end_of___attoft:	
  1419                           
  1420                           	psect	text7
  1421  0537                     __ptext7:	
  1422 ;; *************** function ___ftpack *****************
  1423 ;; Defined at:
  1424 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\float.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  arg             3    0[COMMON] unsigned um
  1427 ;;  exp             1    3[COMMON] unsigned char 
  1428 ;;  sign            1    4[COMMON] unsigned char 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  3    0[COMMON] float 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1440 ;;      Params:         5       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0
  1442 ;;      Temps:          3       0       0       0       0
  1443 ;;      Totals:         8       0       0       0       0
  1444 ;;Total ram usage:        8 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		___attoft
  1450 ;;		___ftadd
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           
  1455                           ;psect for function ___ftpack
  1456  0537                     ___ftpack:	
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1460  0537  0873               	movf	___ftpack@exp,w
  1461  0538  1903               	btfsc	3,2
  1462  0539  2D3F               	goto	l1088
  1463  053A  0872               	movf	___ftpack@arg+2,w
  1464  053B  0471               	iorwf	___ftpack@arg+1,w
  1465  053C  0470               	iorwf	___ftpack@arg,w
  1466  053D  1D03               	skipz
  1467  053E  2D52               	goto	l1094
  1468  053F                     l1088:	
  1469  053F  3000               	movlw	0
  1470  0540  00F0               	movwf	?___ftpack
  1471  0541  3000               	movlw	0
  1472  0542  00F1               	movwf	?___ftpack+1
  1473  0543  3000               	movlw	0
  1474  0544  00F2               	movwf	?___ftpack+2
  1475  0545  0008               	return
  1476  0546                     l1092:	
  1477  0546  3001               	movlw	1
  1478  0547  00F5               	movwf	??___ftpack
  1479  0548  0875               	movf	??___ftpack,w
  1480  0549  07F3               	addwf	___ftpack@exp,f
  1481  054A  3001               	movlw	1
  1482  054B                     u865:	
  1483  054B  1003               	clrc
  1484  054C  0CF2               	rrf	___ftpack@arg+2,f
  1485  054D  0CF1               	rrf	___ftpack@arg+1,f
  1486  054E  0CF0               	rrf	___ftpack@arg,f
  1487  054F  3EFF               	addlw	-1
  1488  0550  1D03               	skipz
  1489  0551  2D4B               	goto	u865
  1490  0552                     l1094:	
  1491  0552  30FE               	movlw	254
  1492  0553  0572               	andwf	___ftpack@arg+2,w
  1493  0554  1903               	btfsc	3,2
  1494  0555  2D6D               	goto	l301
  1495  0556  2D46               	goto	l1092
  1496  0557                     l1096:	
  1497  0557  3001               	movlw	1
  1498  0558  00F5               	movwf	??___ftpack
  1499  0559  0875               	movf	??___ftpack,w
  1500  055A  07F3               	addwf	___ftpack@exp,f
  1501  055B  3001               	movlw	1
  1502  055C  07F0               	addwf	___ftpack@arg,f
  1503  055D  3000               	movlw	0
  1504  055E  1803               	skipnc
  1505  055F  3001               	movlw	1
  1506  0560  07F1               	addwf	___ftpack@arg+1,f
  1507  0561  3000               	movlw	0
  1508  0562  1803               	skipnc
  1509  0563  3001               	movlw	1
  1510  0564  07F2               	addwf	___ftpack@arg+2,f
  1511  0565  3001               	movlw	1
  1512  0566                     u885:	
  1513  0566  1003               	clrc
  1514  0567  0CF2               	rrf	___ftpack@arg+2,f
  1515  0568  0CF1               	rrf	___ftpack@arg+1,f
  1516  0569  0CF0               	rrf	___ftpack@arg,f
  1517  056A  3EFF               	addlw	-1
  1518  056B  1D03               	skipz
  1519  056C  2D66               	goto	u885
  1520  056D                     l301:	
  1521  056D  30FF               	movlw	255
  1522  056E  0572               	andwf	___ftpack@arg+2,w
  1523  056F  1903               	btfsc	3,2
  1524  0570  2D7C               	goto	l1104
  1525  0571  2D57               	goto	l1096
  1526  0572                     l1102:	
  1527  0572  3001               	movlw	1
  1528  0573  02F3               	subwf	___ftpack@exp,f
  1529  0574  3001               	movlw	1
  1530  0575                     u905:	
  1531  0575  1003               	clrc
  1532  0576  0DF0               	rlf	___ftpack@arg,f
  1533  0577  0DF1               	rlf	___ftpack@arg+1,f
  1534  0578  0DF2               	rlf	___ftpack@arg+2,f
  1535  0579  3EFF               	addlw	-1
  1536  057A  1D03               	skipz
  1537  057B  2D75               	goto	u905
  1538  057C                     l1104:	
  1539  057C  1FF1               	btfss	___ftpack@arg+1,7
  1540  057D  2D72               	goto	l1102
  1541  057E  1873               	btfsc	___ftpack@exp,0
  1542  057F  2D86               	goto	l307
  1543  0580  30FF               	movlw	255
  1544  0581  05F0               	andwf	___ftpack@arg,f
  1545  0582  307F               	movlw	127
  1546  0583  05F1               	andwf	___ftpack@arg+1,f
  1547  0584  30FF               	movlw	255
  1548  0585  05F2               	andwf	___ftpack@arg+2,f
  1549  0586                     l307:	
  1550  0586  1003               	clrc
  1551  0587  0CF3               	rrf	___ftpack@exp,f
  1552  0588  0873               	movf	___ftpack@exp,w
  1553  0589  00F5               	movwf	??___ftpack
  1554  058A  01F6               	clrf	??___ftpack+1
  1555  058B  01F7               	clrf	??___ftpack+2
  1556  058C  3010               	movlw	16
  1557  058D                     u935:	
  1558  058D  1003               	clrc
  1559  058E  0DF5               	rlf	??___ftpack,f
  1560  058F  0DF6               	rlf	??___ftpack+1,f
  1561  0590  0DF7               	rlf	??___ftpack+2,f
  1562  0591  3EFF               	addlw	-1
  1563  0592  1D03               	skipz
  1564  0593  2D8D               	goto	u935
  1565  0594  0875               	movf	??___ftpack,w
  1566  0595  04F0               	iorwf	___ftpack@arg,f
  1567  0596  0876               	movf	??___ftpack+1,w
  1568  0597  04F1               	iorwf	___ftpack@arg+1,f
  1569  0598  0877               	movf	??___ftpack+2,w
  1570  0599  04F2               	iorwf	___ftpack@arg+2,f
  1571  059A  0874               	movf	___ftpack@sign,w
  1572  059B  1903               	btfsc	3,2
  1573  059C  0008               	return
  1574  059D  17F2               	bsf	___ftpack@arg+2,7
  1575  059E  0008               	return
  1576  059F                     __end_of___ftpack:	
  1577                           
  1578                           	psect	text8
  1579  03AE                     __ptext8:	
  1580 ;; *************** function ___wmul *****************
  1581 ;; Defined at:
  1582 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\wmul.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  multiplier      2    0[COMMON] unsigned int 
  1585 ;;  multiplicand    2    2[COMMON] unsigned int 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  product         2    4[COMMON] unsigned int 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  2    0[COMMON] unsigned int 
  1590 ;; Registers used:
  1591 ;;		wreg, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1597 ;;      Params:         4       0       0       0       0
  1598 ;;      Locals:         2       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0
  1600 ;;      Totals:         6       0       0       0       0
  1601 ;;Total ram usage:        6 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; This function calls:
  1604 ;;		Nothing
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           
  1611                           ;psect for function ___wmul
  1612  03AE                     ___wmul:	
  1613                           
  1614                           ;incstack = 0
  1615                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1616  03AE  01F4               	clrf	___wmul@product
  1617  03AF  01F5               	clrf	___wmul@product+1
  1618  03B0                     l1212:	
  1619  03B0  1C70               	btfss	___wmul@multiplier,0
  1620  03B1  2BB8               	goto	l510
  1621  03B2  0872               	movf	___wmul@multiplicand,w
  1622  03B3  07F4               	addwf	___wmul@product,f
  1623  03B4  1803               	skipnc
  1624  03B5  0AF5               	incf	___wmul@product+1,f
  1625  03B6  0873               	movf	___wmul@multiplicand+1,w
  1626  03B7  07F5               	addwf	___wmul@product+1,f
  1627  03B8                     l510:	
  1628  03B8  3001               	movlw	1
  1629  03B9                     u1175:	
  1630  03B9  1003               	clrc
  1631  03BA  0DF2               	rlf	___wmul@multiplicand,f
  1632  03BB  0DF3               	rlf	___wmul@multiplicand+1,f
  1633  03BC  3EFF               	addlw	-1
  1634  03BD  1D03               	skipz
  1635  03BE  2BB9               	goto	u1175
  1636  03BF  3001               	movlw	1
  1637  03C0                     u1185:	
  1638  03C0  1003               	clrc
  1639  03C1  0CF1               	rrf	___wmul@multiplier+1,f
  1640  03C2  0CF0               	rrf	___wmul@multiplier,f
  1641  03C3  3EFF               	addlw	-1
  1642  03C4  1D03               	skipz
  1643  03C5  2BC0               	goto	u1185
  1644  03C6  0871               	movf	___wmul@multiplier+1,w
  1645  03C7  0470               	iorwf	___wmul@multiplier,w
  1646  03C8  1D03               	skipz
  1647  03C9  2BB0               	goto	l1212
  1648  03CA  0875               	movf	___wmul@product+1,w
  1649  03CB  01F1               	clrf	?___wmul+1
  1650  03CC  07F1               	addwf	?___wmul+1,f
  1651  03CD  0874               	movf	___wmul@product,w
  1652  03CE  01F0               	clrf	?___wmul
  1653  03CF  07F0               	addwf	?___wmul,f
  1654  03D0  0008               	return
  1655  03D1                     __end_of___wmul:	
  1656                           
  1657                           	psect	text9
  1658  04DC                     __ptext9:	
  1659 ;; *************** function ___awdiv *****************
  1660 ;; Defined at:
  1661 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\awdiv.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;  divisor         2    0[COMMON] int 
  1664 ;;  dividend        2    2[COMMON] int 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  quotient        2    7[COMMON] int 
  1667 ;;  sign            1    6[COMMON] unsigned char 
  1668 ;;  counter         1    5[COMMON] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  2    0[COMMON] int 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1678 ;;      Params:         4       0       0       0       0
  1679 ;;      Locals:         4       0       0       0       0
  1680 ;;      Temps:          1       0       0       0       0
  1681 ;;      Totals:         9       0       0       0       0
  1682 ;;Total ram usage:        9 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; This function calls:
  1685 ;;		Nothing
  1686 ;; This function is called by:
  1687 ;;		_main
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           
  1692                           ;psect for function ___awdiv
  1693  04DC                     ___awdiv:	
  1694                           
  1695                           ;incstack = 0
  1696                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1697  04DC  01F6               	clrf	___awdiv@sign
  1698  04DD  1FF1               	btfss	___awdiv@divisor+1,7
  1699  04DE  2CE6               	goto	l1122
  1700  04DF  09F0               	comf	___awdiv@divisor,f
  1701  04E0  09F1               	comf	___awdiv@divisor+1,f
  1702  04E1  0AF0               	incf	___awdiv@divisor,f
  1703  04E2  1903               	skipnz
  1704  04E3  0AF1               	incf	___awdiv@divisor+1,f
  1705  04E4  01F6               	clrf	___awdiv@sign
  1706  04E5  0AF6               	incf	___awdiv@sign,f
  1707  04E6                     l1122:	
  1708  04E6  1FF3               	btfss	___awdiv@dividend+1,7
  1709  04E7  2CF1               	goto	l1128
  1710  04E8  09F2               	comf	___awdiv@dividend,f
  1711  04E9  09F3               	comf	___awdiv@dividend+1,f
  1712  04EA  0AF2               	incf	___awdiv@dividend,f
  1713  04EB  1903               	skipnz
  1714  04EC  0AF3               	incf	___awdiv@dividend+1,f
  1715  04ED  3001               	movlw	1
  1716  04EE  00F4               	movwf	??___awdiv
  1717  04EF  0874               	movf	??___awdiv,w
  1718  04F0  06F6               	xorwf	___awdiv@sign,f
  1719  04F1                     l1128:	
  1720  04F1  01F7               	clrf	___awdiv@quotient
  1721  04F2  01F8               	clrf	___awdiv@quotient+1
  1722  04F3  0871               	movf	___awdiv@divisor+1,w
  1723  04F4  0470               	iorwf	___awdiv@divisor,w
  1724  04F5  1903               	skipnz
  1725  04F6  2D28               	goto	l1150
  1726  04F7  01F5               	clrf	___awdiv@counter
  1727  04F8  0AF5               	incf	___awdiv@counter,f
  1728  04F9                     l1138:	
  1729  04F9  1BF1               	btfsc	___awdiv@divisor+1,7
  1730  04FA  2D07               	goto	l1140
  1731  04FB  3001               	movlw	1
  1732  04FC                     u985:	
  1733  04FC  1003               	clrc
  1734  04FD  0DF0               	rlf	___awdiv@divisor,f
  1735  04FE  0DF1               	rlf	___awdiv@divisor+1,f
  1736  04FF  3EFF               	addlw	-1
  1737  0500  1D03               	skipz
  1738  0501  2CFC               	goto	u985
  1739  0502  3001               	movlw	1
  1740  0503  00F4               	movwf	??___awdiv
  1741  0504  0874               	movf	??___awdiv,w
  1742  0505  07F5               	addwf	___awdiv@counter,f
  1743  0506  2CF9               	goto	l1138
  1744  0507                     l1140:	
  1745  0507  3001               	movlw	1
  1746  0508                     u1005:	
  1747  0508  1003               	clrc
  1748  0509  0DF7               	rlf	___awdiv@quotient,f
  1749  050A  0DF8               	rlf	___awdiv@quotient+1,f
  1750  050B  3EFF               	addlw	-1
  1751  050C  1D03               	skipz
  1752  050D  2D08               	goto	u1005
  1753  050E  0871               	movf	___awdiv@divisor+1,w
  1754  050F  0273               	subwf	___awdiv@dividend+1,w
  1755  0510  1D03               	skipz
  1756  0511  2D14               	goto	u1015
  1757  0512  0870               	movf	___awdiv@divisor,w
  1758  0513  0272               	subwf	___awdiv@dividend,w
  1759  0514                     u1015:	
  1760  0514  1C03               	skipc
  1761  0515  2D1D               	goto	l1146
  1762  0516  0870               	movf	___awdiv@divisor,w
  1763  0517  02F2               	subwf	___awdiv@dividend,f
  1764  0518  0871               	movf	___awdiv@divisor+1,w
  1765  0519  1C03               	skipc
  1766  051A  03F3               	decf	___awdiv@dividend+1,f
  1767  051B  02F3               	subwf	___awdiv@dividend+1,f
  1768  051C  1477               	bsf	___awdiv@quotient,0
  1769  051D                     l1146:	
  1770  051D  3001               	movlw	1
  1771  051E                     u1025:	
  1772  051E  1003               	clrc
  1773  051F  0CF1               	rrf	___awdiv@divisor+1,f
  1774  0520  0CF0               	rrf	___awdiv@divisor,f
  1775  0521  3EFF               	addlw	-1
  1776  0522  1D03               	skipz
  1777  0523  2D1E               	goto	u1025
  1778  0524  3001               	movlw	1
  1779  0525  02F5               	subwf	___awdiv@counter,f
  1780  0526  1D03               	btfss	3,2
  1781  0527  2D07               	goto	l1140
  1782  0528                     l1150:	
  1783  0528  0876               	movf	___awdiv@sign,w
  1784  0529  1903               	btfsc	3,2
  1785  052A  2D30               	goto	l1154
  1786  052B  09F7               	comf	___awdiv@quotient,f
  1787  052C  09F8               	comf	___awdiv@quotient+1,f
  1788  052D  0AF7               	incf	___awdiv@quotient,f
  1789  052E  1903               	skipnz
  1790  052F  0AF8               	incf	___awdiv@quotient+1,f
  1791  0530                     l1154:	
  1792  0530  0878               	movf	___awdiv@quotient+1,w
  1793  0531  01F1               	clrf	?___awdiv+1
  1794  0532  07F1               	addwf	?___awdiv+1,f
  1795  0533  0877               	movf	___awdiv@quotient,w
  1796  0534  01F0               	clrf	?___awdiv
  1797  0535  07F0               	addwf	?___awdiv,f
  1798  0536  0008               	return
  1799  0537                     __end_of___awdiv:	
  1800                           
  1801                           	psect	text10
  1802  03FA                     __ptext10:	
  1803 ;; *************** function _Lcd_Write_Char *****************
  1804 ;; Defined at:
  1805 ;;		line 99 in file "lcd.h"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  a               1    wreg     unsigned char 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  a               1    4[COMMON] unsigned char 
  1810 ;;  y               1    3[COMMON] unsigned char 
  1811 ;;  temp            1    2[COMMON] unsigned char 
  1812 ;; Return value:  Size  Location     Type
  1813 ;;		None               void
  1814 ;; Registers used:
  1815 ;;		wreg, status,2, status,0, pclath, cstack
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1821 ;;      Params:         0       0       0       0       0
  1822 ;;      Locals:         3       0       0       0       0
  1823 ;;      Temps:          1       0       0       0       0
  1824 ;;      Totals:         4       0       0       0       0
  1825 ;;Total ram usage:        4 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    1
  1828 ;; This function calls:
  1829 ;;		_Lcd_Port
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;;		_Lcd_Write_String
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836                           
  1837                           ;psect for function _Lcd_Write_Char
  1838  03FA                     _Lcd_Write_Char:	
  1839                           
  1840                           ;incstack = 0
  1841                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1842                           ;Lcd_Write_Char@a stored from wreg
  1843  03FA  00F4               	movwf	Lcd_Write_Char@a
  1844                           
  1845                           ;lcd.h: 102: char temp,y;
  1846                           ;lcd.h: 103: temp = a&0x0F;
  1847  03FB  0874               	movf	Lcd_Write_Char@a,w
  1848  03FC  390F               	andlw	15
  1849  03FD  00F1               	movwf	??_Lcd_Write_Char
  1850  03FE  0871               	movf	??_Lcd_Write_Char,w
  1851  03FF  00F2               	movwf	Lcd_Write_Char@temp
  1852                           
  1853                           ;lcd.h: 104: y = a&0xF0;
  1854  0400  0874               	movf	Lcd_Write_Char@a,w
  1855  0401  39F0               	andlw	240
  1856  0402  00F1               	movwf	??_Lcd_Write_Char
  1857  0403  0871               	movf	??_Lcd_Write_Char,w
  1858  0404  00F3               	movwf	Lcd_Write_Char@y
  1859                           
  1860                           ;lcd.h: 105: RD1 = 1;
  1861  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1862  0406  1303               	bcf	3,6	;RP1=0, select bank0
  1863  0407  1488               	bsf	8,1	;volatile
  1864                           
  1865                           ;lcd.h: 106: Lcd_Port(y>>4);
  1866  0408  0873               	movf	Lcd_Write_Char@y,w
  1867  0409  00F1               	movwf	??_Lcd_Write_Char
  1868  040A  3004               	movlw	4
  1869  040B                     u1205:	
  1870  040B  1003               	clrc
  1871  040C  0CF1               	rrf	??_Lcd_Write_Char,f
  1872  040D  3EFF               	addlw	-1
  1873  040E  1D03               	skipz
  1874  040F  2C0B               	goto	u1205
  1875  0410  0871               	movf	??_Lcd_Write_Char,w
  1876  0411  120A  118A  237A   	fcall	_Lcd_Port
      +       120A  118A         
  1877                           
  1878                           ;lcd.h: 107: RD0 = 1;
  1879  0416  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0417  1303               	bcf	3,6	;RP1=0, select bank0
  1881  0418  1408               	bsf	8,0	;volatile
  1882                           
  1883                           ;lcd.h: 108: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1884  0419  301A               	movlw	26
  1885  041A  00F1               	movwf	??_Lcd_Write_Char
  1886  041B                     u1497:	
  1887  041B  0BF1               	decfsz	??_Lcd_Write_Char,f
  1888  041C  2C1B               	goto	u1497
  1889  041D  0000               	nop
  1890                           
  1891                           ;lcd.h: 109: RD0 = 0;
  1892  041E  1283               	bcf	3,5	;RP0=0, select bank0
  1893  041F  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0420  1008               	bcf	8,0	;volatile
  1895                           
  1896                           ;lcd.h: 110: Lcd_Port(temp);
  1897  0421  0872               	movf	Lcd_Write_Char@temp,w
  1898  0422  120A  118A  237A   	fcall	_Lcd_Port
      +       120A  118A         
  1899                           
  1900                           ;lcd.h: 111: RD0 = 1;
  1901  0427  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0428  1303               	bcf	3,6	;RP1=0, select bank0
  1903  0429  1408               	bsf	8,0	;volatile
  1904                           
  1905                           ;lcd.h: 112: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1906  042A  301A               	movlw	26
  1907  042B  00F1               	movwf	??_Lcd_Write_Char
  1908  042C                     u1507:	
  1909  042C  0BF1               	decfsz	??_Lcd_Write_Char,f
  1910  042D  2C2C               	goto	u1507
  1911  042E  0000               	nop
  1912                           
  1913                           ;lcd.h: 113: RD0 = 0;
  1914  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1915  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1916  0431  1008               	bcf	8,0	;volatile
  1917  0432  0008               	return
  1918  0433                     __end_of_Lcd_Write_Char:	
  1919                           
  1920                           	psect	text11
  1921  0481                     __ptext11:	
  1922 ;; *************** function _Lcd_Init *****************
  1923 ;; Defined at:
  1924 ;;		line 79 in file "lcd.h"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;		None               void
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, pclath, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1938 ;;      Params:         0       0       0       0       0
  1939 ;;      Locals:         0       0       0       0       0
  1940 ;;      Temps:          2       0       0       0       0
  1941 ;;      Totals:         2       0       0       0       0
  1942 ;;Total ram usage:        2 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    2
  1945 ;; This function calls:
  1946 ;;		_Lcd_Cmd
  1947 ;;		_Lcd_Port
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           
  1954                           ;psect for function _Lcd_Init
  1955  0481                     _Lcd_Init:	
  1956                           
  1957                           ;lcd.h: 82: Lcd_Port(0x00);
  1958                           
  1959                           ;incstack = 0
  1960                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1961  0481  3000               	movlw	0
  1962  0482  120A  118A  237A   	fcall	_Lcd_Port
      +       120A  118A         
  1963                           
  1964                           ;lcd.h: 83: _delay((unsigned long)((20)*(8000000/4000.0)));
  1965  0487  3034               	movlw	52
  1966  0488  00F5               	movwf	??_Lcd_Init+1
  1967  0489  30F1               	movlw	241
  1968  048A  00F4               	movwf	??_Lcd_Init
  1969  048B                     u1517:	
  1970  048B  0BF4               	decfsz	??_Lcd_Init,f
  1971  048C  2C8B               	goto	u1517
  1972  048D  0BF5               	decfsz	??_Lcd_Init+1,f
  1973  048E  2C8B               	goto	u1517
  1974  048F  2C90               	nop2
  1975                           
  1976                           ;lcd.h: 84: Lcd_Cmd(0x03);
  1977  0490  3003               	movlw	3
  1978  0491  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  1979                           
  1980                           ;lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000.0)));
  1981  0496  300D               	movlw	13
  1982  0497  00F5               	movwf	??_Lcd_Init+1
  1983  0498  30FB               	movlw	251
  1984  0499  00F4               	movwf	??_Lcd_Init
  1985  049A                     u1527:	
  1986  049A  0BF4               	decfsz	??_Lcd_Init,f
  1987  049B  2C9A               	goto	u1527
  1988  049C  0BF5               	decfsz	??_Lcd_Init+1,f
  1989  049D  2C9A               	goto	u1527
  1990  049E  2C9F               	nop2
  1991                           
  1992                           ;lcd.h: 86: Lcd_Cmd(0x03);
  1993  049F  3003               	movlw	3
  1994  04A0  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  1995                           
  1996                           ;lcd.h: 87: _delay((unsigned long)((11)*(8000000/4000.0)));
  1997  04A5  301D               	movlw	29
  1998  04A6  00F5               	movwf	??_Lcd_Init+1
  1999  04A7  3091               	movlw	145
  2000  04A8  00F4               	movwf	??_Lcd_Init
  2001  04A9                     u1537:	
  2002  04A9  0BF4               	decfsz	??_Lcd_Init,f
  2003  04AA  2CA9               	goto	u1537
  2004  04AB  0BF5               	decfsz	??_Lcd_Init+1,f
  2005  04AC  2CA9               	goto	u1537
  2006                           
  2007                           ;lcd.h: 88: Lcd_Cmd(0x03);
  2008  04AD  3003               	movlw	3
  2009  04AE  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2010                           
  2011                           ;lcd.h: 90: Lcd_Cmd(0x02);
  2012  04B3  3002               	movlw	2
  2013  04B4  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2014                           
  2015                           ;lcd.h: 91: Lcd_Cmd(0x02);
  2016  04B9  3002               	movlw	2
  2017  04BA  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2018                           
  2019                           ;lcd.h: 92: Lcd_Cmd(0x08);
  2020  04BF  3008               	movlw	8
  2021  04C0  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2022                           
  2023                           ;lcd.h: 93: Lcd_Cmd(0x00);
  2024  04C5  3000               	movlw	0
  2025  04C6  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2026                           
  2027                           ;lcd.h: 94: Lcd_Cmd(0x0C);
  2028  04CB  300C               	movlw	12
  2029  04CC  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2030                           
  2031                           ;lcd.h: 95: Lcd_Cmd(0x00);
  2032  04D1  3000               	movlw	0
  2033  04D2  120A  118A  2394   	fcall	_Lcd_Cmd
      +       120A  118A         
  2034                           
  2035                           ;lcd.h: 96: Lcd_Cmd(0x06);
  2036  04D7  3006               	movlw	6
  2037  04D8  120A  118A  2394   	fcall	_Lcd_Cmd
  2038  04DB  0008               	return
  2039  04DC                     __end_of_Lcd_Init:	
  2040                           
  2041                           	psect	text12
  2042  0394                     __ptext12:	
  2043 ;; *************** function _Lcd_Cmd *****************
  2044 ;; Defined at:
  2045 ;;		line 43 in file "lcd.h"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  a               1    wreg     unsigned char 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  a               1    3[COMMON] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;		None               void
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0, pclath, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2059 ;;      Params:         0       0       0       0       0
  2060 ;;      Locals:         1       0       0       0       0
  2061 ;;      Temps:          2       0       0       0       0
  2062 ;;      Totals:         3       0       0       0       0
  2063 ;;Total ram usage:        3 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    1
  2066 ;; This function calls:
  2067 ;;		_Lcd_Port
  2068 ;; This function is called by:
  2069 ;;		_Lcd_Init
  2070 ;;		_Lcd_Clear
  2071 ;;		_Lcd_Set_Cursor
  2072 ;;		_Lcd_Shift_Right
  2073 ;;		_Lcd_Shift_Left
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           
  2078                           ;psect for function _Lcd_Cmd
  2079  0394                     _Lcd_Cmd:	
  2080                           
  2081                           ;incstack = 0
  2082                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2083                           ;Lcd_Cmd@a stored from wreg
  2084  0394  00F3               	movwf	Lcd_Cmd@a
  2085                           
  2086                           ;lcd.h: 45: RD1 = 0;
  2087  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2088  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2089  0397  1088               	bcf	8,1	;volatile
  2090                           
  2091                           ;lcd.h: 46: Lcd_Port(a);
  2092  0398  0873               	movf	Lcd_Cmd@a,w
  2093  0399  120A  118A  237A   	fcall	_Lcd_Port
      +       120A  118A         
  2094                           
  2095                           ;lcd.h: 47: RD0 = 1;
  2096  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2097  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2098  03A0  1408               	bsf	8,0	;volatile
  2099                           
  2100                           ;lcd.h: 48: _delay((unsigned long)((4)*(8000000/4000.0)));
  2101  03A1  300B               	movlw	11
  2102  03A2  00F2               	movwf	??_Lcd_Cmd+1
  2103  03A3  3062               	movlw	98
  2104  03A4  00F1               	movwf	??_Lcd_Cmd
  2105  03A5                     u1547:	
  2106  03A5  0BF1               	decfsz	??_Lcd_Cmd,f
  2107  03A6  2BA5               	goto	u1547
  2108  03A7  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2109  03A8  2BA5               	goto	u1547
  2110  03A9  0000               	nop
  2111                           
  2112                           ;lcd.h: 49: RD0 = 0;
  2113  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2114  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2115  03AC  1008               	bcf	8,0	;volatile
  2116  03AD  0008               	return
  2117  03AE                     __end_of_Lcd_Cmd:	
  2118                           
  2119                           	psect	text13
  2120  037A                     __ptext13:	
  2121 ;; *************** function _Lcd_Port *****************
  2122 ;; Defined at:
  2123 ;;		line 21 in file "lcd.h"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  a               1    wreg     unsigned char 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  a               1    0[COMMON] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2137 ;;      Params:         0       0       0       0       0
  2138 ;;      Locals:         1       0       0       0       0
  2139 ;;      Temps:          0       0       0       0       0
  2140 ;;      Totals:         1       0       0       0       0
  2141 ;;Total ram usage:        1 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_Lcd_Cmd
  2147 ;;		_Lcd_Init
  2148 ;;		_Lcd_Write_Char
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           
  2153                           ;psect for function _Lcd_Port
  2154  037A                     _Lcd_Port:	
  2155                           
  2156                           ;incstack = 0
  2157                           ; Regs used in _Lcd_Port: [wreg]
  2158                           ;Lcd_Port@a stored from wreg
  2159  037A  00F0               	movwf	Lcd_Port@a
  2160                           
  2161                           ;lcd.h: 23: if(a & 1)
  2162  037B  1C70               	btfss	Lcd_Port@a,0
  2163  037C  2B81               	goto	l26
  2164                           
  2165                           ;lcd.h: 24: RD4 = 1;
  2166  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2167  037E  1303               	bcf	3,6	;RP1=0, select bank0
  2168  037F  1608               	bsf	8,4	;volatile
  2169  0380  2B84               	goto	l27
  2170  0381                     l26:	
  2171                           
  2172                           ;lcd.h: 25: else
  2173                           ;lcd.h: 26: RD4 = 0;
  2174  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2175  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2176  0383  1208               	bcf	8,4	;volatile
  2177  0384                     l27:	
  2178                           
  2179                           ;lcd.h: 28: if(a & 2)
  2180  0384  1CF0               	btfss	Lcd_Port@a,1
  2181  0385  2B88               	goto	l28
  2182                           
  2183                           ;lcd.h: 29: RD5 = 1;
  2184  0386  1688               	bsf	8,5	;volatile
  2185  0387  2B89               	goto	l29
  2186  0388                     l28:	
  2187                           
  2188                           ;lcd.h: 30: else
  2189                           ;lcd.h: 31: RD5 = 0;
  2190  0388  1288               	bcf	8,5	;volatile
  2191  0389                     l29:	
  2192                           
  2193                           ;lcd.h: 33: if(a & 4)
  2194  0389  1D70               	btfss	Lcd_Port@a,2
  2195  038A  2B8D               	goto	l30
  2196                           
  2197                           ;lcd.h: 34: RD6 = 1;
  2198  038B  1708               	bsf	8,6	;volatile
  2199  038C  2B8E               	goto	l31
  2200  038D                     l30:	
  2201                           
  2202                           ;lcd.h: 35: else
  2203                           ;lcd.h: 36: RD6 = 0;
  2204  038D  1308               	bcf	8,6	;volatile
  2205  038E                     l31:	
  2206                           
  2207                           ;lcd.h: 38: if(a & 8)
  2208  038E  1DF0               	btfss	Lcd_Port@a,3
  2209  038F  2B92               	goto	l32
  2210                           
  2211                           ;lcd.h: 39: RD7 = 1;
  2212  0390  1788               	bsf	8,7	;volatile
  2213  0391  0008               	return
  2214  0392                     l32:	
  2215                           
  2216                           ;lcd.h: 40: else
  2217                           ;lcd.h: 41: RD7 = 0;
  2218  0392  1388               	bcf	8,7	;volatile
  2219  0393  0008               	return
  2220  0394                     __end_of_Lcd_Port:	
  2221  007E                     btemp	set	126	;btemp
  2222  007E                     wtemp	set	126
  2223  007E                     wtemp0	set	126
  2224  0080                     wtemp1	set	128
  2225  0082                     wtemp2	set	130
  2226  0084                     wtemp3	set	132
  2227  0086                     wtemp4	set	134
  2228  0088                     wtemp5	set	136
  2229  007F                     wtemp6	set	127
  2230  007E                     ttemp	set	126
  2231  007E                     ttemp0	set	126
  2232  0081                     ttemp1	set	129
  2233  0084                     ttemp2	set	132
  2234  0087                     ttemp3	set	135
  2235  007F                     ttemp4	set	127
  2236  007E                     ltemp	set	126
  2237  007E                     ltemp0	set	126
  2238  0082                     ltemp1	set	130
  2239  0086                     ltemp2	set	134
  2240  0080                     ltemp3	set	128
=======
  1003                           ;psect for function _Lcd_Init
  1004  06CC                     _Lcd_Init:	
  1005                           
  1006                           ;lcd.h: 82: Lcd_Port(0x00);
  1007                           
  1008                           ;incstack = 0
  1009                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1010  06CC  3000               	movlw	0
  1011  06CD  120A  118A  25E6  120A  118A  	fcall	_Lcd_Port
  1012                           
  1013                           ;lcd.h: 83: _delay((unsigned long)((20)*(8000000/4000.0)));
  1014  06D2  3034               	movlw	52
  1015  06D3  00F5               	movwf	??_Lcd_Init+1
  1016  06D4  30F1               	movlw	241
  1017  06D5  00F4               	movwf	??_Lcd_Init
  1018  06D6                     u307:	
  1019  06D6  0BF4               	decfsz	??_Lcd_Init,f
  1020  06D7  2ED6               	goto	u307
  1021  06D8  0BF5               	decfsz	??_Lcd_Init+1,f
  1022  06D9  2ED6               	goto	u307
  1023  06DA  2EDB               	nop2
  1024                           
  1025                           ;lcd.h: 84: Lcd_Cmd(0x03);
  1026  06DB  3003               	movlw	3
  1027  06DC  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1028                           
  1029                           ;lcd.h: 85: _delay((unsigned long)((5)*(8000000/4000.0)));
  1030  06E1  300D               	movlw	13
  1031  06E2  00F5               	movwf	??_Lcd_Init+1
  1032  06E3  30FB               	movlw	251
  1033  06E4  00F4               	movwf	??_Lcd_Init
  1034  06E5                     u317:	
  1035  06E5  0BF4               	decfsz	??_Lcd_Init,f
  1036  06E6  2EE5               	goto	u317
  1037  06E7  0BF5               	decfsz	??_Lcd_Init+1,f
  1038  06E8  2EE5               	goto	u317
  1039  06E9  2EEA               	nop2
  1040                           
  1041                           ;lcd.h: 86: Lcd_Cmd(0x03);
  1042  06EA  3003               	movlw	3
  1043  06EB  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1044                           
  1045                           ;lcd.h: 87: _delay((unsigned long)((11)*(8000000/4000.0)));
  1046  06F0  301D               	movlw	29
  1047  06F1  00F5               	movwf	??_Lcd_Init+1
  1048  06F2  3091               	movlw	145
  1049  06F3  00F4               	movwf	??_Lcd_Init
  1050  06F4                     u327:	
  1051  06F4  0BF4               	decfsz	??_Lcd_Init,f
  1052  06F5  2EF4               	goto	u327
  1053  06F6  0BF5               	decfsz	??_Lcd_Init+1,f
  1054  06F7  2EF4               	goto	u327
  1055                           
  1056                           ;lcd.h: 88: Lcd_Cmd(0x03);
  1057  06F8  3003               	movlw	3
  1058  06F9  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1059                           
  1060                           ;lcd.h: 90: Lcd_Cmd(0x02);
  1061  06FE  3002               	movlw	2
  1062  06FF  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1063                           
  1064                           ;lcd.h: 91: Lcd_Cmd(0x02);
  1065  0704  3002               	movlw	2
  1066  0705  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1067                           
  1068                           ;lcd.h: 92: Lcd_Cmd(0x08);
  1069  070A  3008               	movlw	8
  1070  070B  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1071                           
  1072                           ;lcd.h: 93: Lcd_Cmd(0x00);
  1073  0710  3000               	movlw	0
  1074  0711  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1075                           
  1076                           ;lcd.h: 94: Lcd_Cmd(0x0C);
  1077  0716  300C               	movlw	12
  1078  0717  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1079                           
  1080                           ;lcd.h: 95: Lcd_Cmd(0x00);
  1081  071C  3000               	movlw	0
  1082  071D  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1083                           
  1084                           ;lcd.h: 96: Lcd_Cmd(0x06);
  1085  0722  3006               	movlw	6
  1086  0723  120A  118A  2600   	fcall	_Lcd_Cmd
  1087  0726  0008               	return
  1088  0727                     __end_of_Lcd_Init:	
  1089                           
  1090                           	psect	text6
  1091  05DB                     __ptext6:	
  1092 ;; *************** function _Lcd_Clear *****************
  1093 ;; Defined at:
  1094 ;;		line 52 in file "lcd.h"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  2   37[COMMON] int 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0, pclath, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1108 ;;      Params:         0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    2
  1115 ;; This function calls:
  1116 ;;		_Lcd_Cmd
  1117 ;; This function is called by:
  1118 ;;		_main
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           
  1123                           ;psect for function _Lcd_Clear
  1124  05DB                     _Lcd_Clear:	
  1125                           
  1126                           ;lcd.h: 54: Lcd_Cmd(0);
  1127                           
  1128                           ;incstack = 0
  1129                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1130  05DB  3000               	movlw	0
  1131  05DC  120A  118A  2600  120A  118A  	fcall	_Lcd_Cmd
  1132                           
  1133                           ;lcd.h: 55: Lcd_Cmd(1);
  1134  05E1  3001               	movlw	1
  1135  05E2  120A  118A  2600   	fcall	_Lcd_Cmd
  1136  05E5  0008               	return
  1137  05E6                     __end_of_Lcd_Clear:	
  1138                           
  1139                           	psect	text7
  1140  0600                     __ptext7:	
  1141 ;; *************** function _Lcd_Cmd *****************
  1142 ;; Defined at:
  1143 ;;		line 43 in file "lcd.h"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  a               1    wreg     unsigned char 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  a               1    3[COMMON] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;		None               void
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0, pclath, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1157 ;;      Params:         0       0       0       0       0
  1158 ;;      Locals:         1       0       0       0       0
  1159 ;;      Temps:          2       0       0       0       0
  1160 ;;      Totals:         3       0       0       0       0
  1161 ;;Total ram usage:        3 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    1
  1164 ;; This function calls:
  1165 ;;		_Lcd_Port
  1166 ;; This function is called by:
  1167 ;;		_Lcd_Clear
  1168 ;;		_Lcd_Set_Cursor
  1169 ;;		_Lcd_Init
  1170 ;;		_Lcd_Shift_Right
  1171 ;;		_Lcd_Shift_Left
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _Lcd_Cmd
  1177  0600                     _Lcd_Cmd:	
  1178                           
  1179                           ;incstack = 0
  1180                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1181                           ;Lcd_Cmd@a stored from wreg
  1182  0600  00F3               	movwf	Lcd_Cmd@a
  1183                           
  1184                           ;lcd.h: 45: RD1 = 0;
  1185  0601  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0602  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0603  1088               	bcf	8,1	;volatile
  1188                           
  1189                           ;lcd.h: 46: Lcd_Port(a);
  1190  0604  0873               	movf	Lcd_Cmd@a,w
  1191  0605  120A  118A  25E6  120A  118A  	fcall	_Lcd_Port
  1192                           
  1193                           ;lcd.h: 47: RD0 = 1;
  1194  060A  1283               	bcf	3,5	;RP0=0, select bank0
  1195  060B  1303               	bcf	3,6	;RP1=0, select bank0
  1196  060C  1408               	bsf	8,0	;volatile
  1197                           
  1198                           ;lcd.h: 48: _delay((unsigned long)((4)*(8000000/4000.0)));
  1199  060D  300B               	movlw	11
  1200  060E  00F2               	movwf	??_Lcd_Cmd+1
  1201  060F  3062               	movlw	98
  1202  0610  00F1               	movwf	??_Lcd_Cmd
  1203  0611                     u337:	
  1204  0611  0BF1               	decfsz	??_Lcd_Cmd,f
  1205  0612  2E11               	goto	u337
  1206  0613  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1207  0614  2E11               	goto	u337
  1208  0615  0000               	nop
  1209                           
  1210                           ;lcd.h: 49: RD0 = 0;
  1211  0616  1283               	bcf	3,5	;RP0=0, select bank0
  1212  0617  1303               	bcf	3,6	;RP1=0, select bank0
  1213  0618  1008               	bcf	8,0	;volatile
  1214  0619  0008               	return
  1215  061A                     __end_of_Lcd_Cmd:	
  1216                           
  1217                           	psect	text8
  1218  05E6                     __ptext8:	
  1219 ;; *************** function _Lcd_Port *****************
  1220 ;; Defined at:
  1221 ;;		line 21 in file "lcd.h"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  a               1    wreg     unsigned char 
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  a               1    0[COMMON] unsigned char 
  1226 ;; Return value:  Size  Location     Type
  1227 ;;		None               void
  1228 ;; Registers used:
  1229 ;;		wreg
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1235 ;;      Params:         0       0       0       0       0
  1236 ;;      Locals:         1       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0
  1238 ;;      Totals:         1       0       0       0       0
  1239 ;;Total ram usage:        1 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_Lcd_Cmd
  1245 ;;		_Lcd_Init
  1246 ;;		_Lcd_Write_Char
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           
  1251                           ;psect for function _Lcd_Port
  1252  05E6                     _Lcd_Port:	
  1253                           
  1254                           ;incstack = 0
  1255                           ; Regs used in _Lcd_Port: [wreg]
  1256                           ;Lcd_Port@a stored from wreg
  1257  05E6  00F0               	movwf	Lcd_Port@a
  1258                           
  1259                           ;lcd.h: 23: if(a & 1)
  1260  05E7  1C70               	btfss	Lcd_Port@a,0
  1261  05E8  2DED               	goto	l24
  1262                           
  1263                           ;lcd.h: 24: RD4 = 1;
  1264  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1265  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1266  05EB  1608               	bsf	8,4	;volatile
  1267  05EC  2DF0               	goto	l25
  1268  05ED                     l24:	
  1269                           
  1270                           ;lcd.h: 25: else
  1271                           ;lcd.h: 26: RD4 = 0;
  1272  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1273  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1274  05EF  1208               	bcf	8,4	;volatile
  1275  05F0                     l25:	
  1276                           
  1277                           ;lcd.h: 28: if(a & 2)
  1278  05F0  1CF0               	btfss	Lcd_Port@a,1
  1279  05F1  2DF4               	goto	l26
  1280                           
  1281                           ;lcd.h: 29: RD5 = 1;
  1282  05F2  1688               	bsf	8,5	;volatile
  1283  05F3  2DF5               	goto	l27
  1284  05F4                     l26:	
  1285                           
  1286                           ;lcd.h: 30: else
  1287                           ;lcd.h: 31: RD5 = 0;
  1288  05F4  1288               	bcf	8,5	;volatile
  1289  05F5                     l27:	
  1290                           
  1291                           ;lcd.h: 33: if(a & 4)
  1292  05F5  1D70               	btfss	Lcd_Port@a,2
  1293  05F6  2DF9               	goto	l28
  1294                           
  1295                           ;lcd.h: 34: RD6 = 1;
  1296  05F7  1708               	bsf	8,6	;volatile
  1297  05F8  2DFA               	goto	l29
  1298  05F9                     l28:	
  1299                           
  1300                           ;lcd.h: 35: else
  1301                           ;lcd.h: 36: RD6 = 0;
  1302  05F9  1308               	bcf	8,6	;volatile
  1303  05FA                     l29:	
  1304                           
  1305                           ;lcd.h: 38: if(a & 8)
  1306  05FA  1DF0               	btfss	Lcd_Port@a,3
  1307  05FB  2DFE               	goto	l30
  1308                           
  1309                           ;lcd.h: 39: RD7 = 1;
  1310  05FC  1788               	bsf	8,7	;volatile
  1311  05FD  0008               	return
  1312  05FE                     l30:	
  1313                           
  1314                           ;lcd.h: 40: else
  1315                           ;lcd.h: 41: RD7 = 0;
  1316  05FE  1388               	bcf	8,7	;volatile
  1317  05FF  0008               	return
  1318  0600                     __end_of_Lcd_Port:	
  1319  007E                     btemp	set	126	;btemp
  1320  007E                     wtemp	set	126
  1321  007E                     wtemp0	set	126
  1322  0080                     wtemp1	set	128
  1323  0082                     wtemp2	set	130
  1324  0084                     wtemp3	set	132
  1325  0086                     wtemp4	set	134
  1326  0088                     wtemp5	set	136
  1327  007F                     wtemp6	set	127
  1328  007E                     ttemp	set	126
  1329  007E                     ttemp0	set	126
  1330  0081                     ttemp1	set	129
  1331  0084                     ttemp2	set	132
  1332  0087                     ttemp3	set	135
  1333  007F                     ttemp4	set	127
  1334  007E                     ltemp	set	126
  1335  007E                     ltemp0	set	126
  1336  0082                     ltemp1	set	130
  1337  0086                     ltemp2	set	134
  1338  0080                     ltemp3	set	128
>>>>>>> origin/master


Data Sizes:
    Strings     69
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
<<<<<<< HEAD
    BANK0            80     29      33
=======
    BANK0            80      7      11
>>>>>>> origin/master
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

<<<<<<< HEAD
    modf@iptr	PTR  size(1) Largest target is 2
		 -> main@entero(BANK0[2]), 
=======
    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 18
		 -> STR_5(CODE[9]), STR_4(CODE[10]), STR_3(CODE[17]), STR_2(CODE[15]), 
		 -> STR_1(CODE[18]), 
>>>>>>> origin/master


Critical Paths under _main in COMMON

<<<<<<< HEAD
    _main->___fttol
    _modf->___ftadd
    _modf->___fttol
    ___ftadd->___ftpack
    ___attoft->___fttol
    _Lcd_Write_Char->_Lcd_Port
=======
    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
>>>>>>> origin/master
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_modf
    _modf->___ftadd

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (0) _main                                                26    26      0    6775
                                             11 BANK0     18    18      0
                           _Lcd_Init
                     _Lcd_Write_Char
                            ___awdiv
                            ___fttol
                             ___wmul
                               _modf
=======
 (0) _main                                                 9     9      0    1678
                                              0 BANK0      7     7      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
>>>>>>> origin/master
                           _pic_init
 ---------------------------------------------------------------------------------
 (1) _pic_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _modf                                                 4     0      4    5034
                                              7 BANK0      4     0      4
                           ___attoft
                            ___ftadd
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     358
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    2633
                                              8 COMMON     6     0      6
                                              0 BANK0      7     7      0
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___attoft                                             6     3      3    1751
                                              0 BANK0      6     3      3
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1607
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     304
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
=======
 (1) _Lcd_Write_String                                     3     3      0     403
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                      10     9      1     698
                                              4 COMMON    10     9      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
>>>>>>> origin/master
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
=======
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
>>>>>>> origin/master
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _Lcd_Port                                             1     1      0      88
=======
 (3) _Lcd_Port                                             1     1      0      88
>>>>>>> origin/master
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
<<<<<<< HEAD
   _Lcd_Write_Char
     _Lcd_Port
   ___awdiv
   ___fttol
   ___wmul
   _modf
     ___attoft
       ___ftpack
       ___fttol (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg
     ___fttol
=======
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
>>>>>>> origin/master
   _pic_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
<<<<<<< HEAD
ABS                  0      0      2F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      21       5       41.3%
=======
ABS                  0      0      19       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      7       B       5       13.8%
>>>>>>> origin/master
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
<<<<<<< HEAD
DATA                 0      0      2F      12        0.0%


Microchip Technology PIC Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Thu Aug 06 17:10:21 2015

            __CFG_CP$OFF 0000                       l30 038D                       l31 038E  
                     l32 0392                       l26 0381                       l27 0384  
                     l28 0388                       l29 0389             ___awdiv@sign 0076  
    ___wmul@multiplicand 0072             ___ftadd@exp1 0026             ___ftadd@exp2 0025  
           ___ftadd@sign 0024                      l301 056D                      l330 0799  
                    l307 0586                      l510 03B8                      _RD0 0040  
                    _RD1 0041                      _RD4 0044                      _RD5 0045  
                    _RD6 0046                      _RD7 0047             __CFG_CPD$OFF 0000  
                    u905 0575                      u935 058D                      u865 054B  
                    u885 0566                      u985 04FC                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000              main@decimal 002F  
                   l1102 0572                     l1104 057C                     l1200 0611  
                   l1122 04E6                     l1202 0614                     l1140 0507  
                   l1212 03B0                     l1300 076B                     l1150 0528  
                   l1310 0789                     l1302 0770                     l1206 0622  
                   l1128 04F1                     l1320 07BD                     l1312 0795  
                   l1304 0774                     l1154 0530                     l1146 051D  
                   l1138 04F9                     l1330 07E0                     l1092 0546  
                   l1316 07AB                     l1172 05B7                     l1094 0552  
                   l1270 071A                     l1190 05E9                     l1096 0557  
                   l1088 053F                     l1280 0730                     l1192 05F9  
                   l1258 03E0                     l1274 0721                     l1370 06D5  
                   l1362 0676                     l1292 074A                     l1198 0606  
                   l1374 06E8                     l1298 075F                     u1005 0508  
                   u1015 0514                     u1025 051E                     u1105 05EA  
                   u1205 040B                     u1135 0608                     u1315 074B  
                   u1075 05BE                     u1405 078A                     u1175 03B9  
                   u1185 03C0                     u1345 0760                     u1507 042C  
                   u1517 048B                     u1527 049A                     u1375 0775  
                   u1537 04A9                     u1465 0674                     u1547 03A5  
                   u1475 06A9                     u1485 06E6                     u1497 041B  
           __CFG_WRT$OFF 0000                     _main 062B             ___ftpack@arg 0070  
                   _modf 0433             ___ftpack@exp 0073                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0000  
                   ttemp 007E                     wtemp 007E          __end_of_Lcd_Cmd 03AE  
           ___fttol@exp1 007D             ___fttol@lval 0079            ___attoft@sign 0025  
                  ?_main 0070                    ?_modf 0027          __end_of___awdiv 0537  
        __end_of___ftadd 07F8            __CFG_WDTE$OFF 0000          __end_of___ftneg 037A  
        ___awdiv@divisor 0070          __end_of___fttol 062B          ___awdiv@counter 0075  
                  _TRISD 0088             main@recibido 0031            ___ftpack@sign 0074  
                  main@x 003B                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
       __end_of_Lcd_Init 04DC         __end_of_Lcd_Port 0394          __initialization 07F8  
           __end_of_main 06F1             __end_of_modf 0481                   ??_main 002B  
          ___fttol@sign1 0078                   ??_modf 007E         ___awdiv@dividend 0072  
       __end_of___attoft 03FA         __end_of___ftpack 059F                ??_Lcd_Cmd 0071  
__size_of_Lcd_Write_Char 0039           __CFG_PWRTE$OFF 0000                   ___wmul 03AE  
              ??___awdiv 0074                ??___ftadd 0020                ??___ftneg 0073  
              ??___fttol 0074                   _estado 003F         ___awdiv@quotient 0077  
       __end_of_pic_init 0372  __end_of__initialization 07FC               ___ftadd@f1 0078  
             ___ftadd@f2 007B               ___attoft@c 0020               ___ftneg@f1 0070  
             ___fttol@f1 0070           __pcstackCOMMON 0070                ?_Lcd_Init 0070  
              ?_Lcd_Port 0070               __pbssBANK0 003D               __pmaintext 062B  
                ?___wmul 0070                ?___attoft 0020                ?___ftpack 0070  
             ??_Lcd_Init 0074               ??_Lcd_Port 0070           _Lcd_Write_Char 03FA  
                _Lcd_Cmd 0394                ?_pic_init 0070                  ___awdiv 04DC  
                ___ftadd 06F1                  ___ftneg 0372          __size_of___wmul 0023  
                ___fttol 059F              _TiempoPulso 003D               ??___attoft 0023  
             ??___ftpack 0075                  __ptext0 0000                  __ptext1 036B  
                __ptext2 0433                  __ptext3 059F                  __ptext4 0372  
                __ptext5 06F1                  __ptext6 03D1                  __ptext7 0537  
                __ptext8 03AE                  __ptext9 04DC   __end_of_Lcd_Write_Char 0433  
   end_of_initialization 07FC               ??_pic_init 0070                Lcd_Port@a 0070  
              _TRISAbits 0085          ?_Lcd_Write_Char 0070               main@entero 0039  
         __end_of___wmul 03D1      start_initialization 07F8        __size_of_Lcd_Init 005B  
      __size_of_Lcd_Port 001A                 ??___wmul 0074          Lcd_Write_Char@a 0074  
        Lcd_Write_Char@y 0073        __size_of___attoft 0029        __size_of___ftpack 0068  
              ___latbits 0002            __pcstackBANK0 0020                 ?_Lcd_Cmd 0070  
      __size_of_pic_init 0007                 ?___awdiv 0070                 ?___ftadd 0078  
               ?___ftneg 0070                 ?___fttol 0070           ___wmul@product 0074  
               Lcd_Cmd@a 0073        ___wmul@multiplier 0070         ??_Lcd_Write_Char 0071  
               _Lcd_Init 0481                 _Lcd_Port 037A         __size_of_Lcd_Cmd 001A  
              modf@value 0027         __size_of___awdiv 005B         __size_of___ftadd 0107  
       __size_of___ftneg 0008         __size_of___fttol 008C                 ___attoft 03D1  
               ___ftpack 0537                 _main$517 0034                 __ptext10 03FA  
               __ptext11 0481                 __ptext12 0394                 __ptext13 037A  
          __size_of_main 00C6            __size_of_modf 004E                 _pic_init 036B  
               main@base 0037        main@entero_decena 002D                 modf@iptr 002A  
     Lcd_Write_Char@temp 0072  
=======
DATA                 0      0      19      12        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Aug 06 16:50:02 2015

                        pc 0002                __CFG_CP$OFF 0000                         l30 05FE  
                       l24 05ED                         l25 05F0                         l26 05F4  
                       l27 05F5                         l28 05F9                         l29 05FA  
                       fsr 0004                        l743 06A1                        l817 07C2  
                      l771 061D                        l781 0731                        l799 0775  
                      _RD0 0040                        _RD1 0041                        _RD4 0044  
                      _RD5 0045                        _RD6 0046                        _RD7 0047  
                      u215 06B2                        u307 06D6                        u235 0773  
                      u317 06E5                        u245 07C0                        u327 06F4  
                      u175 064D                        u337 0611                        u257 075A  
             __CFG_CPD$OFF 0000                        u195 0687                        u267 07A3  
                      u277 07EB                        u287 065D                        u297 066E  
                      fsr0 0004               __CFG_FOSC$HS 0000               main@NuevaVar 0023  
                     STR_1 0009                       STR_2 002C                       STR_3 001B  
                     STR_4 003B                       STR_5 0045               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0070                       _main 0727                       btemp 007E  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 0000  
                     ttemp 007E         ??_Lcd_Write_String 0075                       wtemp 007E  
          __end_of_Lcd_Cmd 061A                      ?_main 0070              __CFG_WDTE$OFF 0000  
  __size_of_Lcd_Set_Cursor 0057                      _TRISD 0088                      pclath 000A  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F           __end_of_Lcd_Init 0727  
         __end_of_Lcd_Port 0600            __initialization 07F8               __end_of_main 07F8  
                   ??_main 0020         __size_of_Lcd_Clear 000B                  ??_Lcd_Cmd 0071  
  __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000                     _estado 0029  
         __end_of_pic_init 05DB            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 007A            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 05E6             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0675  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pbssBANK0 0027  
               __pmaintext 0727  __size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 06CC  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 063C                    _Lcd_Cmd 0600                  ?_pic_init 0070  
              _TiempoPulso 0027            ?_Lcd_Set_Cursor 0074                    __ptext1 05D4  
                  __ptext2 061A                    __ptext3 063C                    __ptext4 0675  
                  __ptext5 06CC                    __ptext6 05DB                    __ptext7 0600  
                  __ptext8 05E6     __end_of_Lcd_Write_Char 0675       end_of_initialization 07FC  
               ??_pic_init 0070                  Lcd_Port@a 0070                  _TRISAbits 0085  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
               main@numero 0025                  _Lcd_Clear 05DB           _Lcd_Write_String 061A  
      start_initialization 07F8          __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0002              __pcstackBANK0 0020        __end_of__stringdata 004E  
                 ?_Lcd_Cmd 0070          __size_of_pic_init 0007           ??_Lcd_Set_Cursor 0075  
                __pstrings 0003                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0008                __stringdata 0009           ??_Lcd_Write_Char 0071  
                 _Lcd_Init 06CC                   _Lcd_Port 05E6   __end_of_Lcd_Write_String 063C  
         __size_of_Lcd_Cmd 001A         __end_of__stringtab 0009              __size_of_main 00D1  
                 _pic_init 05D4         Lcd_Write_Char@temp 0072                  stringcode 0003  
       Lcd_Set_Cursor@temp 007C                   stringdir 0003                   stringtab 0003  
>>>>>>> origin/master
